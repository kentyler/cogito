#!/usr/bin/env node

import pg from 'pg';
import nodemailer from 'nodemailer';
import dotenv from 'dotenv';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Load .env from recall-bot directory
dotenv.config({ path: path.join(__dirname, '../recall-bot/.env') });

const { Pool } = pg;
const pool = new Pool({
    connectionString: process.env.DATABASE_URL,
    ssl: process.env.DATABASE_URL.includes('render.com') ? { rejectUnauthorized: false } : false
});

// Create email transporter
const emailTransporter = nodemailer.createTransport({
    host: 'localhost',
    port: 2525,
    secure: false,
    tls: {
        rejectUnauthorized: false
    }
});

async function sendTranscriptEmail(blockId) {
    try {
        console.log(`\nüìß Preparing to send transcript email for block_id: ${blockId}\n`);
        
        // Get meeting info
        const meetingQuery = `
            SELECT 
                bm.*,
                b.name as meeting_name
            FROM conversation.block_meetings bm
            LEFT JOIN conversation.blocks b ON b.block_id = bm.block_id
            WHERE bm.block_id = $1
        `;
        
        const meetingResult = await pool.query(meetingQuery, [blockId]);
        
        if (meetingResult.rows.length === 0) {
            console.error('‚ùå No meeting found with this block_id');
            return;
        }
        
        const meeting = meetingResult.rows[0];
        
        if (!meeting.transcript_email) {
            console.error('‚ùå No email address configured for this meeting');
            return;
        }
        
        if (meeting.email_sent) {
            console.log(`‚ö†Ô∏è  Email already sent to ${meeting.transcript_email}`);
            return;
        }
        
        console.log('‚úÖ Meeting details:');
        console.log(`   - Email to: ${meeting.transcript_email}`);
        console.log(`   - Meeting name: ${meeting.meeting_name || 'Untitled Meeting'}`);
        console.log(`   - Meeting URL: ${meeting.meeting_url}`);
        
        // Get the transcript
        let transcriptText = '';
        
        if (meeting.full_transcript) {
            console.log('\nüìÑ Using rebuilt transcript from database...');
            
            // Parse the JSON transcript
            const transcriptData = meeting.full_transcript;
            if (transcriptData.transcript) {
                transcriptText = transcriptData.transcript;
            } else {
                transcriptText = JSON.stringify(transcriptData, null, 2);
            }
        } else {
            console.error('‚ùå No transcript found. Please run rebuild-transcript.js first.');
            return;
        }
        
        // Format transcript for email
        const htmlContent = `
<!DOCTYPE html>
<html>
<head>
    <style>
        body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
        .container { max-width: 800px; margin: 0 auto; padding: 20px; }
        .header { background-color: #f0f0f0; padding: 20px; border-radius: 8px; margin-bottom: 20px; }
        .transcript { background-color: #f9f9f9; padding: 20px; border-left: 4px solid #4CAF50; white-space: pre-wrap; font-family: 'Courier New', monospace; }
        .footer { margin-top: 20px; padding: 20px; background-color: #f0f0f0; border-radius: 8px; text-align: center; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h2>Meeting Transcript</h2>
            <p><strong>Meeting:</strong> ${meeting.meeting_name || 'Untitled Meeting'}</p>
            <p><strong>Date:</strong> ${new Date(meeting.started_at).toLocaleString()}</p>
            <p><strong>Meeting URL:</strong> <a href="${meeting.meeting_url}">${meeting.meeting_url}</a></p>
        </div>
        
        <div class="transcript">
${transcriptText}
        </div>
        
        <div class="footer">
            <p>This transcript was automatically generated by Cogito Meeting Bot.</p>
            <p>Thank you for using our service!</p>
        </div>
    </div>
</body>
</html>
`;

        const mailOptions = {
            from: '"Cogito Meeting Bot" <meetings@cogito-meetings.onrender.com>',
            to: meeting.transcript_email,
            subject: `Meeting Transcript: ${meeting.meeting_name || 'Your Meeting'}`,
            html: htmlContent,
            text: `Meeting Transcript\n\n${transcriptText}`
        };
        
        console.log('\nüìÆ Sending email...');
        
        await emailTransporter.sendMail(mailOptions);
        console.log(`‚úÖ Transcript email sent successfully to ${meeting.transcript_email}`);
        
        // Mark as sent in database
        await pool.query(`
            UPDATE conversation.block_meetings 
            SET email_sent = TRUE 
            WHERE block_id = $1
        `, [blockId]);
        
        console.log('‚úÖ Database updated: email_sent = TRUE');
        
    } catch (error) {
        console.error('‚ùå Error sending transcript email:', error);
        
        // Log the error details
        if (error.code === 'ECONNREFUSED') {
            console.error('\nüí° Email server connection refused. Make sure:');
            console.error('   1. The email server is running on localhost:2525');
            console.error('   2. Check conversational-repl/server.js for email server setup');
            console.error('   3. Or configure a proper SMTP server in the transporter');
        }
    } finally {
        await pool.end();
    }
}

// Get block_id from command line
const blockId = process.argv[2];

if (!blockId) {
    console.error('Usage: node send-transcript-email.js <block_id>');
    process.exit(1);
}

sendTranscriptEmail(blockId);