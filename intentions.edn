{:cogito-intentions
 {:meta {:created "2025-01-25"
         :last-updated "2025-01-25"
         :purpose "Bridge between high-level design intentions and implementation"}
  
  :core-purpose
  "Capture conversations so that they can be data for both humans and LLMs thinking about them."
  
  :key-insights
  ["Conversations have inflection points where meaning shifts"
   "Patterns emerge from participant interactions over time" 
   "Context and relationships shape meaning more than individual words"
   "Transcripts are data that can reveal thinking processes"]
  
  :architectural-principles
  {:data-first "Events, turns, and participant interactions are primary - UI derives from data"
   :participant-centric "Every action, turn, and pattern is tied to a participant"
   :pattern-recognition "Surface emergent themes, conflicts, and cognitive patterns"
   :multi-tenant "Support multiple clients while maintaining data isolation"
   :write-once "Turns and interactions are immutable - no editing history"}
  
  :current-architecture
  {:database {:type "PostgreSQL with vector embeddings"
              :primary-schemas ["conversation" "client_mgmt" "events" "files"]
              :key-entities {"participants" "People and AI entities in conversations"
                            "turns" "Individual messages/contributions with embeddings"
                            "blocks" "Containers for conversation sessions and meetings"
                            "clients" "Tenant organizations"
                            "user_clients" "Many-to-many user-client relationships"}}
   
   :authentication {:pattern "Email/password with client selection"
                   :flow ["Login validates user" "Query user_clients" "Auto-select single client OR show selection"]
                   :session "Stores user_id, email, client_id, client_name, role"}
   
   :transcript-processing {:pattern "meeting → published_transcript + individual turns → embeddings"
                          :rationale "Large transcripts too big for single embedding - break into speaker turns"
                          :storage "Published transcript for humans, turns for search/analysis"}}
  
  :feature-map
  {:user-authentication
   {:intent "Multi-client user access with smooth UX"
    :problem-solved "Duplicate emails, client selection only when needed"
    :status "✅ COMPLETED - Multi-client selection working, logout button added"
    :locations {:api "conversational-repl/server.js:260-423"
                :frontend {:login "conversational-repl/src/main/cogito/login.cljs"
                          :client-selection "conversational-repl/src/main/cogito/client_selection.cljs"  
                          :core-app "conversational-repl/src/main/cogito/core.cljs (3-state flow)"
                          :events "conversational-repl/src/main/cogito/events.cljs (:login-success, :select-client, :logout)"
                          :subscriptions "conversational-repl/src/main/cogito/subs.cljs"
                          :workbench-logout "conversational-repl/src/main/cogito/workbench.cljs (logout button in tab nav)"}
                :migrations "migrations/ folder now in .gitignore"}
    :key-endpoints {"/api/login" "Handles email/password, returns clients or auto-selects"
                    "/api/select-client" "For users with multiple client access"
                    "/api/auth-status" "Returns current auth state"
                    "/api/logout" "Clears session and returns to login"}
    :ui-flow ["Login form → Client selection (if multiple clients) → Main workbench with logout button"]
    :compilation "Requires shadow-cljs compile app after ClojureScript changes"}
   
   :database-operations
   {:intent "Consistent DB access without schema/connection guessing"
    :problem-solved "Claude constantly searching migrations for schema, connection string issues"
    :locations {:agent "lib/database-agent.js"
                :cli "scripts/db-agent-cli.js"
                :examples "examples/database-agent-usage.js"}
    :key-patterns {:connection "Always uses DATABASE_URL from .env"
                   :schema "Live introspection via getSchema()"
                   :transactions "Built-in transaction support"}}
   
   :conversational-repl
   {:intent "Real-time conversation analysis and response generation"
    :metaphor "REPL for human dialogue - interactive conversation processing"
    :locations {:server "server.js"
                :frontend "public/"
                :processors ["turn-processor-wrapper.cjs"
                           "similarity-orchestrator-wrapper.cjs"]
                :claude-integration ["claude-stop-hook.cjs"
                                   "claude-stop-hook-prompts.cjs"]}
    :key-features ["Multi-response generation with alternatives"
                   "Semantic similarity detection"
                   "Turn embedding and storage"
                   "Claude Code conversation capture"]}
   
   :web-session-meetings
   {:intent "Automatic meeting creation for web conversation sessions"
    :problem-solved "Orphaned turns without proper meeting association in web interface"
    :status "✅ COMPLETED - All web turns now properly associated with meetings"
    :locations {:session-helper "server/lib/session-meeting.js"
                :auth-integration "server/routes/auth.js (single client auto-selection)"
                :client-selection "server/routes/client-management.js (multi-client selection/switching)"
                :turn-creation "server/routes/conversations.js (uses session meeting_id)"
                :llm-prompt "server/lib/llm-prompt-builder.js (extracted for maintainability)"
                :frontend "src/main/cogito/events.cljs (no longer sends meeting_id)"}
    :architecture {:meeting-creation "After successful client selection (not during initial login)"
                   :session-storage "meeting_id stored in req.session.meeting_id"
                   :meeting-type "'cogito_web' for web conversation sessions"
                   :turn-association "All turns automatically reference session meeting"
                   :data-integrity "No orphaned turns - every turn belongs to a meeting"}
    :key-principles ["Session isolation - each user session gets own meeting"
                     "Client separation - switching clients creates new meeting"
                     "Automatic association - no manual meeting_id handling in frontend"
                     "Data integrity - all turns must belong to meetings"]
    :implementation-notes "Meeting creation happens at the completion of authentication flow, ensuring proper client_id and user_id association"}
   
   :meeting-transcripts
   {:intent "Transform meeting recordings into searchable, analyzable data"
    :current-challenge "Large transcripts can't be embedded as single units"
    :proposed-solution "Break transcripts into speaker turns, embed individually"
    :locations {:storage "conversation.block_meetings (published_transcript)"
                :processing "lib/database-agent.js (importTranscript method)"
    :data-flow "Raw transcript → Parse by speaker → Store as turns → Generate embeddings → Enable semantic search"}}
   
   :browser-extension
   {:intent "Capture conversations from web interfaces (Claude, ChatGPT)"
    :locations {:manifest "browser-extension/manifest.json"
                :captures ["browser-extension/claude-capture.js"
                          "browser-extension/openai-capture.js"]
                :popup "browser-extension/popup.js"}
    :integration "Sends captured conversations to conversational-repl API"}
   
   :claude-code-integration
   {:intent "Automatically capture Claude Code conversations for analysis"
    :problem-solved "Making Claude-human interactions part of Cogito's conversation intelligence"
    :status "✅ ACTIVE - Hooks capture sessions in real-time"
    :locations {:hooks ["claude-stop-hook.cjs" "claude-stop-hook-prompts.cjs"]
                :database "conversation.blocks (type: claude_conversation)"
                :turns "conversation.turns (source_type: user_input|claude_response)"}
    :functionality {:claude-stop-hook.cjs "General session capture with transcript parsing"
                   :claude-stop-hook-prompts.cjs "JSON transcript parsing for prompt/response pairs"
                   :block-creation "Creates Claude Session blocks per session_id"
                   :turn-storage "Stores user prompts and Claude responses as turns"}
    :data-flow ["Claude Code triggers hook on conversation end"
               "Hook reads transcript file (text or JSON format)"
               "Parses latest user/assistant exchange"
               "Creates/updates conversation block for session"
               "Stores prompt and response as separate turns"]
    :configuration "Hooks configured in Claude Code settings to run on stop events"
    :warning "⚠️  CRITICAL: Do not delete these files during cleanup - they are essential for Claude conversation capture"}}
  
  :deprecated-patterns
  {:conversation-tables {:status "removed in migration 008"
                        :replaced-by "blocks and turns architecture"
                        :warning "Some old code might still reference these"}
   
   :backstage-integration {:status "abandoned"
                          :reason "Decided against wrapper approach for complexity reasons"
                          :artifacts-remaining ["migrations/014_backstage_foundation_migration.sql"]}
   
   :client_id-on-users {:status "refactored 2025-01-25"
                       :replaced-by "user_clients junction table"
                       :migration "031_remove_client_id_from_users.sql"
                       :note "Enables multi-tenant user access"}
   
   :conversation_id-concept {:status "removed 2025-08-03"
                           :replaced-by "meeting_id session association"
                           :rationale "conversation_id was unused dead code - all turns should belong to meetings"
                           :changes ["Removed from API request/response" "Removed from frontend state" "Meeting_id now sourced from session"]
                           :locations ["server/routes/conversations.js" "src/main/cogito/events.cljs" "src/main/cogito/db.cljs"]}}
  
  :active-explorations
  {:meetings-as-first-class-entities
   {:question "Should meetings be separate from blocks?"
    :current "Meetings stored in block_meetings, linked to blocks"
    :proposed "Direct meetings table with turns referencing meeting_id"
    :rationale "Meetings aren't really 'blocks' - they're distinct entities"}
   
   :embedding-strategy
   {:question "Turn-level vs semantic chunks for embeddings?"
    :decision "Speaker turns (decided 2025-01-25)"
    :rationale "Natural boundaries, focused retrieval, simpler parsing"}
  
  :meeting-bot-resources
   {:question "How to make files/web resources available as queryable context during meetings?"
    :intent "Meeting bot can reference uploaded documents, links, PDFs, etc. during conversation"
    :status "✅ FILE UPLOADS COMPLETED - Web links remain as future enhancement"
    :ui-location {:integrated-app "ClojureScript bot creation tab in main workbench"
                  :removed "conversational-repl/public/bot-manager/ (standalone interface removed to reduce confusion)"}
    :database-design {:files {:existing-table "context.files (stores file content and metadata)"
                             :existing-chunks "context.chunks (chunked content with embeddings)"
                             :junction-table "meetings.meeting_files (meeting_id, file_id)"}
                      :links {:new-table "meetings.meeting_links (meeting_id, url, title, content_text, embeddings) [future]"}}
    :existing-infrastructure {:service "lib/file-upload.js (FileUploadService class)"
                             :features ["File type detection" "Text extraction" "Content chunking (1000 chars, 200 overlap)"
                                       "OpenAI embedding generation" "Vector similarity search" "Background processing"]
                             :storage-schema {:file_uploads "Main file metadata (filename, mime_type, file_path, client_id)"
                                            :file_upload_vectors "Chunked content with embeddings (chunk_index, content_text, content_vector)"}
                             :search-capability "searchFileContent(query) - pgvector similarity search"
                             :missing-components ["Upload API endpoints" "UI file selection" "Integration with bot creation"]}
    :rationale "Leverage existing files infrastructure, separate files from web links for different processing needs"
    :backend-integration {:create-bot-endpoint "conversational-repl/server.js:1074 (/api/create-bot)"
                         :current-flow "Creates block + block_meetings records"
                         :resource-processing "After bot creation, process uploaded resources"}
    :workflow ["User uploads files/adds links during bot creation (new UI section)"
               "On bot creation success, process resources in background"
               "Extract text content from files/URLs"
               "Generate embeddings for semantic search"
               "Store in block_meeting_resources linked to block_meeting_id"
               "Meeting bot queries relevant resources during conversation"]
    :integration-point "Meeting bot queries resources via embedding similarity before responding in Google Meet chat"
    :current-chat-processing {:webhook-endpoint "conversational-repl/server.js:1344 (/webhook/chat)"
                             :trigger-detection "Lines 1396-1401: isQuestion = '?' OR isDirectedAtCogito (cogito/hi cogito/hey cogito/hello cogito)"
                             :prompt-extraction {:explicit-prompt "Lines 1418-1420: For 'cogito' style, extract question after 'cogito'"
                                               :implicit-prompt "For '?' style, the prompt is the recent meeting conversation context"}
                             :context-retrieval "Lines 1407-1430: Gets full_transcript from block_meetings"
                             :claude-integration "Lines 1432-1442: Anthropic API call with conversation context"
                             :response-mechanism "Lines 1510-1519: Recall.ai send_chat_message API"}
    :resource-integration-architecture {:step-1 "Extract prompt (explicit from chat OR implicit from recent conversation)"
                                       :step-2 "Query both tables using prompt embedding similarity:"
                                       :step-2a "context.files JOIN meetings.meeting_files for uploaded documents"
                                       :step-2b "block_meeting_links for web resources"
                                       :step-3 "Augment Claude prompt with: conversation context + relevant files/links + extracted prompt"
                                       :integration-point "After line 1430 (context retrieval), before Claude API call"}}
   
   :executable-wizard-files
   {:question "How can meeting files contain executable wizard instructions for screen-shared facilitation?"
    :intent "Transform static wizard prompts (GPT/Claude custom instructions) into interactive meeting facilitators"
    :vision "Upload wizard instruction files that screen-shared Cogito UI can read and execute as live facilitation"
    :architecture {:file-as-instructions "Wizard markdown/text files uploaded as meeting resources"
                   :screen-share-execution "Shared UI reads wizard files and becomes interactive facilitator"
                   :turn-integration "All wizard interactions saved as turns in meeting conversation"
                   :meeting-coordination "Bot instance (transcript/chat) + Screen instance (wizard) write to same block_id"}
    :workflow ["User uploads wizard instruction file (e.g., evaporating-cloud-wizard.md) during bot creation"
               "Screen-shared Cogito UI detects meeting and retrieves wizard files"
               "UI reads wizard instructions and presents facilitator interface"
               "Wizard prompts and participant responses saved as turns"
               "Complete facilitated session becomes part of meeting record"]
    :examples {:evaporating-cloud "Conflict resolution wizard with step-by-step process"
               :retrospective "Team retrospective facilitation"
               :decision-making "Structured decision process with criteria and scoring"}
    :technical-integration {:existing-files-infrastructure "Leverages file_uploads and block_meeting_files tables"
                           :file-retrieval "GET /api/meetings/{meetingId}/files"
                           :content-access "GET /api/files/{fileId}/content"
                           :turn-creation "POST /api/turns with source_type: 'wizard_facilitation'"
                           :meeting-detection "Screen-shared UI joins by meeting URL/ID"}
    :benefits ["Reuse existing GPT/Claude custom instructions"
               "Live interactive facilitation visible to all participants"
               "Complete audit trail of facilitated sessions"
               "Version control for wizard improvements"
               "Seamless integration with meeting conversation flow"]
    :status "FUTURE EXPLORATION - Requires screen-share UI mode and wizard execution engine"}
   
   :executable-diagram-wizards
   {:question "How can wizards include live, editable diagrams where user interactions become meeting turns?"
    :intent "Extend wizard files to contain executable ClojureScript components for real-time visual collaboration"
    :vision "Wizard files as .edn containing both facilitation prompts AND executable diagram code"
    :architecture {:code-as-data "ClojureScript components stored as data structures in wizard files"
                   :two-pane-interface "Split screen: facilitation chat + live collaborative diagram"
                   :edit-to-turn-flow "Every diagram edit automatically saved as conversation turn"
                   :multi-modal-participation "Voice, chat, and visual contributions seamlessly integrated"}
    :wizard-file-structure {:facilitation-prompts "Text prompts for conversation flow"
                           :diagram-component "Executable Reagent component code as data"
                           :state-updates "Functions for handling user interactions"
                           :visual-bindings "Mapping between conversation state and diagram elements"}
    :interaction-examples ["[Sarah - Diagram Edit]: Added '2-week sprints' to Want A"
                          "[Ben - Diagram Edit]: Connected assumption to underlying need"
                          "[Ken - Voice]: 'Can we challenge that assumption?'"
                          "[Wizard]: Updates diagram highlighting contested assumption"]
    :use-cases {:evaporating-cloud "Live conflict mapping with editable wants/needs/assumptions"
               :retrospective "Interactive timeline with draggable action items"
               :decision-matrix "Collaborative scoring grid with real-time updates"
               :mind-mapping "Branching thought diagrams that grow during brainstorming"}
    :technical-implementation {:diagram-edits-handler "(defn on-diagram-edit [edit-type data] ...)"
                              :turn-generation "Convert UI interactions to turn records automatically"
                              :state-synchronization "Diagram state updates reflected in meeting conversation"
                              :code-evaluation "Safe eval of wizard component code from .edn files"}
    :benefits ["Complete audit trail of visual collaboration"
               "Replay-able diagram evolution through meeting turns"
               "Seamless voice/chat/visual integration"
               "Version-controlled diagram improvements"
               "Async collaboration during live meetings"
               "Living documents that grow through conversation"]
    :status "FUTURE EXPLORATION - Requires wizard execution engine + collaborative diagram framework"}
   
   :ude-capture-ecosystem
   {:question "How to capture UDEs (Undesirable Effects) during work and make them available as meeting resources?"
    :intent "Create frictionless capture tools that feed raw organizational pain points into thinking tools wizards"
    :vision "Hotkey-triggered capture tools that grab text/screenshots during work, building corpus for Theory of Constraints analysis"
    :architecture {:capture-tools "Multiple platform-specific capture clients feeding unified database"
                   :organic-collection "UDEs captured unsystematically, disconnected from each other initially"
                   :meeting-integration "Bi-directional: select UDEs → suggest tools, OR select tools → find relevant UDEs"
                   :llm-analysis "Pattern detection across disconnected UDEs to suggest appropriate thinking tools"}
    :capture-workflows {:windows-hotkey "AutoHotkey tool: select text → hotkey → review popup → submit to API"
                       :windows-snipping "Screenshot capture: hotkey → screen selection → image + optional text → submit"
                       :macos-equivalent "Swift/Python/PyObjC implementation with same UX flow"
                       :browser-extension "Capture from web pages as part of research/work"
                       :mobile-capture "Quick UDE entry during meetings or field work"
                       :email-integration "Forward problem emails as UDE entries"}
    :project-structure {:isolation "capture-tools/ directory with independent tool subdirectories"
                       :shared-components "capture-tools/shared/ for API client and UDE schema"
                       :platform-tools {:windows "capture-tools/windows-hotkey/ (AutoHotkey + form popup)"
                                       :macos "capture-tools/macos-hotkey/ (Swift/Python/PyObjC)"
                                       :cross-platform "capture-tools/electron/ (future unified app)"
                                       :web "capture-tools/browser-extension/ (existing pattern)"}
                       :api-boundary "POST /api/udes with text, image, source info, metadata"}
    :database-design {:udes-table "Simple schema: content_text, content_image, source_info, captured_at, captured_by, tool_name"
                     :minimal-metadata "Timestamp, source context, capturing user - no forced categorization"
                     :embedding-ready "Text content prepared for semantic similarity during meeting tool selection"}
    :meeting-integration {:resource-selection "UDEs available alongside files/links during bot creation"
                         :tool-suggestion "LLM analyzes UDE collection → suggests Current Reality Tree, Conflict Resolution, etc."
                         :reverse-flow "User selects thinking tool → system finds relevant UDEs from corpus"
                         :wizard-resources "UDEs become raw materials for executable diagram wizards"}
    :thinking-tools-bridge {:toc-integration "UDEs as input to Theory of Constraints thinking processes"
                           :pattern-analysis "Identify recurring themes, cause-effect relationships, stakeholder impacts"
                           :tool-mapping "Current Reality Tree for system analysis, Evaporating Cloud for conflicts, etc."
                           :facilitation-enhancement "Rich UDE corpus improves wizard-guided thinking sessions"}
    :benefits ["Frictionless capture during natural work flow"
               "Organic problem collection without forced structure"
               "Rich corpus for pattern analysis and tool suggestion"
               "Bridge between daily work frustrations and structured thinking"
               "Cross-platform capture feeding unified analysis"]
    :status "DESIGN PHASE - Ready for initial Windows hotkey prototype"}}
  
  :known-pain-points
  ["Claude searching migration files instead of querying live schema"
   "Connection string confusion between .env files"
   "Large transcripts breaking embedding generation"
   "Difficulty understanding which code is current vs deprecated"
   "participant_events tables exist but are not being used"]
  
  :success-patterns
  ["Database agent eliminates schema guessing"
   "Junction tables for many-to-many relationships"
   "Write-once immutable turns for audit trail"
   "Live schema introspection over static documentation"]}}