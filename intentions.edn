{:cogito-intentions
 {:meta {:created "2025-01-25"
         :last-updated "2025-01-25"
         :purpose "Bridge between high-level design intentions and implementation"}
  
  :core-purpose
  "Capture conversations so that they can be data for both humans and LLMs thinking about them."
  
  :key-insights
  ["Conversations have inflection points where meaning shifts"
   "Patterns emerge from participant interactions over time" 
   "Context and relationships shape meaning more than individual words"
   "Transcripts are data that can reveal thinking processes"]
  
  :architectural-principles
  {:data-first "Events, turns, and participant interactions are primary - UI derives from data"
   :participant-centric "Every action, turn, and pattern is tied to a participant"
   :pattern-recognition "Surface emergent themes, conflicts, and cognitive patterns"
   :multi-tenant "Support multiple clients while maintaining data isolation"
   :write-once "Turns and interactions are immutable - no editing history"}
  
  :current-architecture
  {:database {:type "PostgreSQL with vector embeddings"
              :primary-schemas ["conversation" "client_mgmt" "events" "files"]
              :key-entities {"participants" "People and AI entities in conversations"
                            "turns" "Individual messages/contributions with embeddings"
                            "blocks" "Containers for conversation sessions and meetings"
                            "clients" "Tenant organizations"
                            "user_clients" "Many-to-many user-client relationships"}}
   
   :authentication {:pattern "Email/password with client selection"
                   :flow ["Login validates user" "Query user_clients" "Auto-select single client OR show selection"]
                   :session "Stores user_id, email, client_id, client_name, role"}
   
   :transcript-processing {:pattern "meeting → published_transcript + individual turns → embeddings"
                          :rationale "Large transcripts too big for single embedding - break into speaker turns"
                          :storage "Published transcript for humans, turns for search/analysis"}}
  
  :feature-map
  {:user-authentication
   {:intent "Multi-client user access with smooth UX"
    :problem-solved "Duplicate emails, client selection only when needed"
    :locations {:api "conversational-repl/server.js:260-423"
                :migrations ["migrations/029_remove_users_email_unique_constraint.sql"
                            "migrations/030_create_user_clients_table_preserve_duplicates.sql" 
                            "migrations/031_remove_client_id_from_users.sql"]}
    :key-endpoints {"/api/login" "Handles email/password, returns clients or auto-selects"
                    "/api/select-client" "For users with multiple client access"
                    "/api/auth-status" "Returns current auth state"}}
   
   :database-operations
   {:intent "Consistent DB access without schema/connection guessing"
    :problem-solved "Claude constantly searching migrations for schema, connection string issues"
    :locations {:agent "lib/database-agent.js"
                :cli "scripts/db-agent-cli.js"
                :examples "examples/database-agent-usage.js"}
    :key-patterns {:connection "Always uses DATABASE_URL from .env"
                   :schema "Live introspection via getSchema()"
                   :transactions "Built-in transaction support"}}
   
   :conversational-repl
   {:intent "Real-time conversation analysis and response generation"
    :metaphor "REPL for human dialogue - interactive conversation processing"
    :locations {:server "conversational-repl/server.js"
                :frontend "conversational-repl/public/"
                :processors ["conversational-repl/turn-processor-wrapper.cjs"
                           "conversational-repl/similarity-orchestrator-wrapper.cjs"]}
    :key-features ["Multi-response generation with alternatives"
                   "Semantic similarity detection"
                   "Turn embedding and storage"]}
   
   :meeting-transcripts
   {:intent "Transform meeting recordings into searchable, analyzable data"
    :current-challenge "Large transcripts can't be embedded as single units"
    :proposed-solution "Break transcripts into speaker turns, embed individually"
    :locations {:storage "conversation.block_meetings (published_transcript)"
                :processing "lib/database-agent.js (importTranscript method)"
    :data-flow "Raw transcript → Parse by speaker → Store as turns → Generate embeddings → Enable semantic search"}}
   
   :browser-extension
   {:intent "Capture conversations from web interfaces (Claude, ChatGPT)"
    :locations {:manifest "browser-extension/manifest.json"
                :captures ["browser-extension/claude-capture.js"
                          "browser-extension/openai-capture.js"]
                :popup "browser-extension/popup.js"}
    :integration "Sends captured conversations to conversational-repl API"}}
  
  :deprecated-patterns
  {:conversation-tables {:status "removed in migration 008"
                        :replaced-by "blocks and turns architecture"
                        :warning "Some old code might still reference these"}
   
   :backstage-integration {:status "abandoned"
                          :reason "Decided against wrapper approach for complexity reasons"
                          :artifacts-remaining ["migrations/014_backstage_foundation_migration.sql"]}
   
   :client_id-on-users {:status "refactored 2025-01-25"
                       :replaced-by "user_clients junction table"
                       :migration "031_remove_client_id_from_users.sql"
                       :note "Enables multi-tenant user access"}}
  
  :active-explorations
  {:meetings-as-first-class-entities
   {:question "Should meetings be separate from blocks?"
    :current "Meetings stored in block_meetings, linked to blocks"
    :proposed "Direct meetings table with turns referencing meeting_id"
    :rationale "Meetings aren't really 'blocks' - they're distinct entities"}
   
   :embedding-strategy
   {:question "Turn-level vs semantic chunks for embeddings?"
    :decision "Speaker turns (decided 2025-01-25)"
    :rationale "Natural boundaries, focused retrieval, simpler parsing"}
  
  :meeting-bot-resources
   {:question "How to make files/web resources available as queryable context during meetings?"
    :intent "Meeting bot can reference uploaded documents, links, PDFs, etc. during conversation"
    :ui-location {:current-page "conversational-repl/public/bot-manager/index.html"
                  :current-form "Lines 213-248: meetingUrl + meetingName fields"
                  :proposed-addition "New form section between meetingName and submit button"}
    :database-design {:files {:existing-table "files.file_uploads (stores embeddings)"
                             :existing-vectors "files.file_upload_vectors (chunked content with embeddings)"
                             :junction-table "block_meeting_files (block_meeting_id, file_upload_id)"}
                      :links {:new-table "block_meeting_links (block_meeting_id, url, title, content_text, embeddings)"}}
    :existing-infrastructure {:service "lib/file-upload.js (FileUploadService class)"
                             :features ["File type detection" "Text extraction" "Content chunking (1000 chars, 200 overlap)"
                                       "OpenAI embedding generation" "Vector similarity search" "Background processing"]
                             :storage-schema {:file_uploads "Main file metadata (filename, mime_type, file_path, client_id)"
                                            :file_upload_vectors "Chunked content with embeddings (chunk_index, content_text, content_vector)"}
                             :search-capability "searchFileContent(query) - pgvector similarity search"
                             :missing-components ["Upload API endpoints" "UI file selection" "Integration with bot creation"]}
    :rationale "Leverage existing files infrastructure, separate files from web links for different processing needs"
    :backend-integration {:create-bot-endpoint "conversational-repl/server.js:1074 (/api/create-bot)"
                         :current-flow "Creates block + block_meetings records"
                         :resource-processing "After bot creation, process uploaded resources"}
    :workflow ["User uploads files/adds links during bot creation (new UI section)"
               "On bot creation success, process resources in background"
               "Extract text content from files/URLs"
               "Generate embeddings for semantic search"
               "Store in block_meeting_resources linked to block_meeting_id"
               "Meeting bot queries relevant resources during conversation"]
    :integration-point "Meeting bot queries resources via embedding similarity before responding in Google Meet chat"
    :current-chat-processing {:webhook-endpoint "conversational-repl/server.js:1344 (/webhook/chat)"
                             :trigger-detection "Lines 1396-1401: isQuestion = '?' OR isDirectedAtCogito (cogito/hi cogito/hey cogito/hello cogito)"
                             :prompt-extraction {:explicit-prompt "Lines 1418-1420: For 'cogito' style, extract question after 'cogito'"
                                               :implicit-prompt "For '?' style, the prompt is the recent meeting conversation context"}
                             :context-retrieval "Lines 1407-1430: Gets full_transcript from block_meetings"
                             :claude-integration "Lines 1432-1442: Anthropic API call with conversation context"
                             :response-mechanism "Lines 1510-1519: Recall.ai send_chat_message API"}
    :resource-integration-architecture {:step-1 "Extract prompt (explicit from chat OR implicit from recent conversation)"
                                       :step-2 "Query both tables using prompt embedding similarity:"
                                       :step-2a "files.file_uploads JOIN block_meeting_files for uploaded documents"
                                       :step-2b "block_meeting_links for web resources"
                                       :step-3 "Augment Claude prompt with: conversation context + relevant files/links + extracted prompt"
                                       :integration-point "After line 1430 (context retrieval), before Claude API call"}}}
  
  :known-pain-points
  ["Claude searching migration files instead of querying live schema"
   "Connection string confusion between .env files"
   "Large transcripts breaking embedding generation"
   "Difficulty understanding which code is current vs deprecated"]
  
  :success-patterns
  ["Database agent eliminates schema guessing"
   "Junction tables for many-to-many relationships"
   "Write-once immutable turns for audit trail"
   "Live schema introspection over static documentation"]}}