{"version":3,"sources":["cogito/core.cljs"],"mappings":";AAaA,kBAAA,lBAAMA;AAAN,AACE,IAAMC,uBAAe,sDAAA,mFAAA,zIAACC;IAChBC,kCAA0B,sDAAA,mFAAA,zIAACD;AADjC,AAEE;AAAA,AAAA,0FAAA,0FAEG,kBAAA,AAAAE,uCAAA,kHAAA,kBAAA,AAAAA,kDAAA,yIAAA,AAAA,tVACGH,0GAAgBI,iEAChBF,qHAA2BG,yIACrBC;;;;AAEhB,yBAAA,zBAAuBC;AAAvB,AACE,wDAAA,jDAACC,oIAAaT,wBAAK,wBAAA,xBAAiBU;;AAEtC,yBAAA,zBAAMC;AAAN,AACE,4BAAA,mFAAA,/GAACC;;AACD,uBAAA,mFAAA,1GAACC;;AACD,OAACL","names":["cogito.core/app","authenticated?","re_frame.core.subscribe","pending-client-selection?","cljs.core/deref","cogito.workbench/panel","cogito.client-selection/client-selection-form","cogito.login/login-form","cogito.core/mount-root","reagent.dom.render","js/document","cogito.core/init!","re-frame.core/dispatch-sync","re-frame.core/dispatch"],"sourcesContent":["(ns cogito.core\n  (:require [reagent.core :as r]\n            [reagent.dom :as rdom]\n            [re-frame.core :as rf]\n            [cogito.workbench :as workbench]\n            [cogito.login :as login]\n            [cogito.client-selection :as client-selection]\n            [cogito.story-arc :as story-arc]\n            [cogito.meetings :as meetings]\n            [cogito.events]\n            [cogito.subs]\n            [day8.re-frame.http-fx]))\n\n(defn app []\n  (let [authenticated? (rf/subscribe [:authenticated?])\n        pending-client-selection? (rf/subscribe [:pending-client-selection?])]\n    (fn []\n      [:div.conversational-repl\n       (cond\n         @authenticated? [workbench/panel]\n         @pending-client-selection? [client-selection/client-selection-form]\n         :else [login/login-form])])))\n\n(defn ^:dev/after-load mount-root []\n  (rdom/render [app] (.getElementById js/document \"app\")))\n\n(defn init! []\n  (rf/dispatch-sync [:initialize-db])\n  (rf/dispatch [:check-auth-status])\n  (mount-root))"]}