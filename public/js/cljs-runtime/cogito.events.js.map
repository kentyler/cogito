{"version":3,"sources":["cogito/events.cljs"],"mappings":";AAMA,yDAAA,zDAACA,+HAEA,WAAKC,EAAEA;AAAP,AACEC;;AAEH,yDAAA,zDAACF,2IAEA,cAAAG,HAAKG;AAAL,AAAA,IAAAF,aAAAD;QAAA,AAAAE,4CAAAD,WAAA,IAAA,/DAASH;aAAT,AAAAI,4CAAAD,WAAA,IAAA,pEAAWG;AAAX,AACE,wDAAA,jDAACC,8CAAMF,2EAAmBC;;AAE7B,yDAAA,zDAACE,+HAEA,WAAAC,SAAAC;AAAA,AAAA,IAAAC,aAAAF;IAAAE,iBAAA,AAAAC,4BAAAD;SAAA,AAAAE,4CAAAF,eAAA,hEAAaN;IAAbS,aAAAJ;QAAA,AAAAN,4CAAAU,WAAA,IAAA,/DAAmBd;aAAnB,AAAAI,4CAAAU,WAAA,IAAA,pEAAqBR;AAArB,AAEE,IAAMS,mBAAiB,AAACC,eAAK,AAAA,sFAAQX;IAC/BY,mBAAiB,kBAAM,iBAAAC,oBAAKH;AAAL,AAAA,oBAAAG;AACI,oDAAA,7CAACC,mHAAgB,gEAAA,mFAAA,8DAAA,jNAACC,+CAAOL;;AAD7BG;;MAAN,AAEC,iBAAMG,UAAQ,AAAA,gFAAKN;IACbO,gBAAc,kDAAA,mFAAA,mGAAA,xOAACF,+CAAOf,yKAAyBgB;IAC/CE,eAAa,gEAAA,mFAAA,8DAAA,jNAACH,+CAAOL;IACrBS,eAAa,uEAAA,vEAACpB,4CAAImB,aAAaD;AAHrC,AAAA,kDAAA,8FAAA,2CAAA,kEAAA,4FAAA,wKAAA,5QAIwCD,sFACSC,wFACH,AAAA,gFAAKE,iGACA,AAAA,wFAAUA;KAT9D;AADvB,AAAA,kDAAA,oKAAA,yEAAA,2CAAA,+DAAA,wLAAA,/dAWO,iDAAA,6DAAA,9GAACjB,8CAAMF,kPACcC,kFACS,AAAA,yGAAkBD,+DAC1BY;;AAEhC,qBAAA,rBAACQ,8FAEA,WAAAC;AAAA,AAAA,IAAAC,aAAAD;IAAAC,iBAAA,AAAAf,4BAAAe;aAAA,AAAAd,4CAAAc,eAAA,pEAAarB;sBAAb,AAAAO,4CAAAc,eAAA,7EAAoBC;cAApB,AAAAf,4CAAAc,eAAA,rEAAoCE;AAApC,OACM,MAAA,NAACC,iCACS,qBAAA,2CAAA,uDAAA,OAAA,2DAAA,2CAAA,eAAA,2BAAA,mEAAA,UAAA,3VAACC,iZAGe,AAACC,eAAkB,qBAAA,2CAAA,gEAAA,2FAAA,3NAACD,yHAAkBzB,kFACOsB,2EACRC,vtBAC/D,wvBAAA,WAAAI,nwBACA,PACA;AAFA,AAAQ,OAAAA;SACR,WAAAC;AAAA,AAAQ,8BAAA,mFAAA,1GAACC,6LAAkC,0DAAAD,mEAAA,2EAAA,xMAACE;UAC5C,WAAAC;AAAA,AAAS,8BAAA,mFAAA,qEAAAA,/KAACF;;;AAEjB,yDAAA,zDAACpC,4IAEA,cAAAuC,HAAKjC;AAAL,AAAA,IAAAkC,aAAAD;QAAA,AAAAlC,4CAAAmC,WAAA,IAAA,/DAASvC;eAAT,AAAAI,4CAAAmC,WAAA,IAAA,tEAAWC;AAAX,AACE,IAAMC,kBAAgB,iBAAA,AAEC,OAACE,KAAQ,CAAA,uJAAA,vGAAS,AAAA,4FAAWH;gBAF9B,GAAA,CAAAE,kBAGQE;AAHR,QAAAF,JAGiBG;AAHjB,AAAA,kDAAA,wEAAA,sDAAA,yDAKa,CAAA,4DAAqB,AAAA,4FAAWL;;AAL7C,AAAA,MAAAE;;;;AAAtB,2GAMMrC,rDACA,wDAAA,6DAAA,wDAAA,wEAAA,GAAA,xPAACE,mUAEuB,iBAAAuC,mBAAI,AAAA,yGAAkBN,tgBAE9C,OAACO;AAFuB,AAAA,oBAAAD;AAAAA;;AACG,OAAA,yGAAkBzC;;WAC7C,uEAAA,2CAAA,4IAAA,wJAAA,9VAAe2C,4GAAU,AAAA,gFAAKR,kEACF,AAAA,sFAASA,wEACPC;;AAEvC,yDAAA,zDAAC1C,8HAEA,cAAAkD,HAAK5C;AAAL,AAAA,IAAA6C,aAAAD;QAAA,AAAA7C,4CAAA8C,WAAA,IAAA,/DAASlD;YAAT,AAAAI,4CAAA8C,WAAA,IAAA,nEAAWC;AAAX,AACE,+DAAA,6DAAA,wDAAA,7KAAC5C,qDAAMF,+KACS8C;;AAEnB,yDAAA,zDAAC3C,uIAEA,WAAKR,EAAEA;AAAP,AAAA,kDAAA,8EAAA;;AAGD,qBAAA,rBAACyB,mGAEA,WAAKzB;AAAL,OACM,MAAA,NAAC8B,yBACS,qBAAA,2CAAA,mEAAA,nIAACC,zBACX,qLAAA,WAAAqB,hMACA,PACA;AAFA,AAAQ,OAAAA;SACR,WAAAC;AAAA,AAAQ,8BAAA,mFAAA,1GAAClB,8LAAmC,0DAAAkB,mEAAA,2EAAA,xMAACjB;UAC7C;AAAA,AAAS,8BAAA,mFAAA,oFAAA,2CAAA,uEAAA,hTAACD;;;AAEjB,yDAAA,zDAACpC,6IAEA,cAAAuD,HAAKjD;AAAL,AAAA,IAAAkD,aAAAD;QAAA,AAAAlD,4CAAAmD,WAAA,IAAA,/DAASvD;eAAT,AAAAI,4CAAAmD,WAAA,IAAA,tEAAWf;AAAX,AACE,+DAAA,2OAAA,gOAAA,kLAAA,rrBAACjC,qDAAMF,6EAAmB,AAAA,qGAAgBmC,0JACL,AAAA,wHAAyBA,yFACjC,AAAA,yFAAUA,+DACvB,AAAA,mFAAOA;;AAE1B,yDAAA,zDAACzC,gIAEA,cAAAyD,HAAKnD;AAAL,AAAA,IAAAoD,aAAAD;QAAA,AAAApD,4CAAAqD,WAAA,IAAA,/DAASzD;eAAT,AAAAI,4CAAAqD,WAAA,IAAA,tEAAWjB;AAAX,AACE,oBAAI,AAAA,yFAAUA;AAEZ,+DAAA,0EAAA,wDAAA,8FAAA,KAAA,7RAACjC,qDAAMF,uTAEsB,AAAA,yFAAUmC;;AAEvC,+DAAA,0EAAA,uDAAA,zLAACjC,qDAAMF,yLACS,AAAA,mFAAOmC;;;AAG5B,yDAAA,zDAAChC,gIAEA,WAAAkD,SAAAC;AAAA,AAAA,IAAAC,aAAAF;IAAAE,iBAAA,AAAAhD,4BAAAgD;SAAA,AAAA/C,4CAAA+C,eAAA,hEAAavD;IAAbwD,aAAAF;QAAA,AAAAvD,4CAAAyD,WAAA,IAAA,/DAAmB7D;gBAAnB,AAAAI,4CAAAyD,WAAA,IAAA,vEAAqBC;AAArB,AAAA,kDAAA,sLAAA,iEAAA,2CAAA,uDAAA,oDAAA,mDAAA,qBAAA,2DAAA,2CAAA,eAAA,2BAAA,wDAAA,2CAAA,+EAAA,0FAAA,iOAAA,iEAAA,mFAAA,mFAAA,gEAAA,mFAAA,55CACO,iDAAA,+EAAA,hIAACvD,8CAAMF,uqBAIsByD,4EACZ,AAACC,2GACQ,+BAAA,2CAAA,8DAAA,xIAACC;;AAInC,yDAAA,zDAACjE,oIAEA,cAAAkE,HAAK5D;AAAL,AAAA,IAAA6D,aAAAD;QAAA,AAAA7D,4CAAA8D,WAAA,IAAA,/DAASlE;eAAT,AAAAI,4CAAA8D,WAAA,IAAA,tEAAW1B;AAAX,AACE,+DAAA,0EAAA,uDAAA,8FAAA,MAAA,+EAAA,MAAA,+EAAA,KAAA,tcAACjC,qDAAMF,scAIS,AAAA,mFAAOmC;;AAE1B,yDAAA,zDAACzC,iJAEA,cAAAoE,HAAK9D;AAAL,AAAA,IAAA+D,aAAAD;QAAA,AAAA/D,4CAAAgE,WAAA,IAAA,/DAASpE;YAAT,AAAAI,4CAAAgE,WAAA,IAAA,nEAAWjB;AAAX,AACE,+DAAA,+EAAA,wDAAA,0FAAA,zRAAC5C,qDAAMF;;AAIV,yDAAA,zDAACG,kHAEA,WAAA6D,SAAkBrE;AAAlB,AAAA,IAAAsE,aAAAD;IAAAC,iBAAA,AAAA1D,4BAAA0D;SAAA,AAAAzD,4CAAAyD,eAAA,hEAAajE;AAAb,AAAA,kDAAA,6KAAA,iEAAA,2CAAA,uDAAA,oDAAA,mDAAA,cAAA,2DAAA,2CAAA,eAAA,2BAAA,0FAAA,iOAAA,iEAAA,mFAAA,kFAAA,gEAAA,mFAAA,ztCACO,iDAAA,sEAAA,vHAACE,8CAAMF,ijBAIU,AAAC0D,2GACQ,+BAAA,2CAAA,8DAAA,xIAACC;;AAInC,yDAAA,zDAACjE,mIAEA,WAAKM,GAAGL;AAAR,AAAA,kDAAA,0EAAA,MAAA,8FAAA,MAAA,qDAAA,KAAA,+EAAA,KAAA,sEAAA,MAAA,wDAAA,iCAAA,wEAAA;;AAUD,yDAAA,zDAACD,oJAEA,cAAAwE,HAAKlE;AAAL,AAAA,IAAAmE,aAAAD;QAAA,AAAAnE,4CAAAoE,WAAA,IAAA,/DAASxE;cAAT,AAAAI,4CAAAoE,WAAA,IAAA,rEAAWnD;YAAX,AAAAjB,4CAAAoE,WAAA,IAAA,nEAAmBC;AAAnB,AACE,6BAAA,mFAAA,zGAACC,mBAASrE,yKAAyBgB,gBAASoD;;AAG/C,yDAAA,zDAAC1E,oJAEA,cAAA4E,HAAKtE;AAAL,AAAA,IAAAuE,aAAAD;QAAA,AAAAvE,4CAAAwE,WAAA,IAAA,/DAAS5E;cAAT,AAAAI,4CAAAwE,WAAA,IAAA,rEAAWvD;AAAX,AACE,yDAAA,mFAAA,mGAAA,xOAACD,+CAAOf,yKAAyBgB;;AAGpC,yDAAA,zDAACtB,mJAEA,cAAA8E,HAAKxE;AAAL,AAAA,IAAAyE,aAAAD;QAAA,AAAAzE,4CAAA0E,WAAA,IAAA,/DAAS9E;UAAT,AAAAI,4CAAA0E,WAAA,IAAA,jEAAWC;AAAX,AACE,wDAAA,jDAACxE,8CAAMF,oFAAyB0E;;AAGnC,yDAAA,zDAACvE,gJAEA,WAAAwE,SAAAC;AAAA,AAAA,IAAAC,aAAAF;IAAAE,iBAAA,AAAAtE,4BAAAsE;SAAA,AAAArE,4CAAAqE,eAAA,hEAAa7E;IAAb8E,aAAAF;QAAA,AAAA7E,4CAAA+E,WAAA,IAAA,/DAAmBnF;gBAAnB,AAAAI,4CAAA+E,WAAA,IAAA,vEAAqBC;AAArB,AAAA,kDAAA,+TAAA,iEAAA,2CAAA,uDAAA,oDAAA,mDAAA,kBAAA,wDAAA,2CAAA,gLAAA,wLAAA,0FAAA,iOAAA,iEAAA,mFAAA,yGAAA,gEAAA,mFAAA,pmDACW/E,9CACA,iDAAA,qFAAA,tIAACE,/CACD,2LAAA,3LAAC8E,ktBAGmC,AAAA,iGAAcD,8EACb,AAAA,kGAAeA,6EAC9B,AAACrB,2GACD,+BAAA,2CAAA,8DAAA,xIAACC;;AAInC,yDAAA,zDAACxD,0JAEA,WAAA8E,SAAAC;AAAA,AAAA,IAAAC,aAAAF;IAAAE,iBAAA,AAAA5E,4BAAA4E;SAAA,AAAA3E,4CAAA2E,eAAA,hEAAanF;IAAboF,aAAAF;QAAA,AAAAnF,4CAAAqF,WAAA,IAAA,/DAAmBzF;eAAnB,AAAAI,4CAAAqF,WAAA,IAAA,tEAAqBjD;AAArB,AAAA,kDAAA,uuBAAA,6DAAA,mFAAA,5rBACWnC,9CACA,iDAAA,qFAAA,tIAACE,9CACD,2LAAA,mFAAA,2CAAA,qDAAA,2DAAA,sDAAA,/dAACA,/CAED,mlBAAA,nlBAACwC,8pBAA0BC,eAAKR;;AAG5C,yDAAA,zDAACzC,0JAEA,cAAA2F,HAAKrF;AAAL,AAAA,IAAAsF,aAAAD;QAAA,AAAAtF,4CAAAuF,WAAA,IAAA,/DAAS3F;eAAT,AAAAI,4CAAAuF,WAAA,IAAA,tEAAWnD;AAAX,AACE,IAAMoD,gBAAc,iBAAA9C,mBAAI,wDAAA,mFAAA,8DAAA,zMAAC1B,+CAAOoB;AAAZ,AAAA,oBAAAM;AAAAA;;AAAA;;;AAApB,mGAEMzC,9CACA,iDAAA,qFAAA,tIAACE,rDACD,kMAAA,mFAAA,2CAAA,qDAAA,uDAAA,raAACA,2dACmCqF;;AAG7C,yDAAA,zDAACpF,kJAEA,WAAAqF,SAAkB7F;AAAlB,AAAA,IAAA8F,aAAAD;IAAAC,iBAAA,AAAAlF,4BAAAkF;SAAA,AAAAjF,4CAAAiF,eAAA,hEAAazF;AAAb,AAAA,kDAAA,uMAAA,iEAAA,2CAAA,uDAAA,mDAAA,mDAAA,YAAA,0FAAA,iOAAA,iEAAA,mFAAA,+GAAA,gEAAA,mFAAA,7nCACO,iDAAA,gGAAA,jJAACE,8CAAMF,wbAGmB,AAAC0D,2GACD,+BAAA,2CAAA,8DAAA,xIAACC;;AAInC,yDAAA,zDAACjE,gKAEA,cAAAgG,HAAK1F;AAAL,AAAA,IAAA2F,aAAAD;QAAA,AAAA3F,4CAAA4F,WAAA,IAAA,/DAAShG;WAAT,AAAAI,4CAAA4F,WAAA,IAAA,lEAAWC;AAAX,mGACM5F,9CACA,iDAAA,gGAAA,jJAACE,rDACD,6MAAA,tMAACA,kSAAiC0F;;AAEzC,yDAAA,zDAAClG,gKAEA,cAAAmG,HAAK7F;AAAL,AAAA,IAAA8F,aAAAD;QAAA,AAAA9F,4CAAA+F,WAAA,IAAA,/DAASnG;eAAT,AAAAI,4CAAA+F,WAAA,IAAA,tEAAW3D;AAAX,mGACMnC,9CACA,iDAAA,gGAAA,jJAACE,rDACD,6MAAA,4FAAA,lSAACA;;AAGR,yDAAA,zDAACC,sJAEA,WAAA4F,SAAAC;AAAA,AAAA,IAAAC,aAAAF;IAAAE,iBAAA,AAAA1F,4BAAA0F;SAAA,AAAAzF,4CAAAyF,eAAA,hEAAajG;IAAbkG,aAAAF;QAAA,AAAAjG,4CAAAmG,WAAA,IAAA,/DAAmBvG;aAAnB,AAAAI,4CAAAmG,WAAA,IAAA,pEAAqBC;AAArB,AAAA,kDAAA,4QAAA,iEAAA,2CAAA,uDAAA,oDAAA,wIAAA,0FAAA,iOAAA,iEAAA,mFAAA,mHAAA,gEAAA,mFAAA,hxCACO,sBAAA,mFAAA,6GAAA,tNAAC9B,mBAASrE,oLAAgCmG,+RAEhB,CAAA,iEAAA,RAAkBA,qFAClB,AAACzC,2GACD,+BAAA,2CAAA,8DAAA,xIAACC,8YAC+BwC,sQACAA;;AAElE,yDAAA,zDAAChG,6JAEA,WAAAiG,SAAAC;AAAA,AAAA,IAAAC,aAAAF;IAAAE,iBAAA,AAAA/F,4BAAA+F;SAAA,AAAA9F,4CAAA8F,eAAA,hEAAatG;IAAbuG,aAAAF;QAAA,AAAAtG,4CAAAwG,WAAA,IAAA,/DAAmB5G;aAAnB,AAAAI,4CAAAwG,WAAA,IAAA,pEAAqBJ;eAArB,AAAApG,4CAAAwG,WAAA,IAAA,tEAA4BpE;AAA5B,AAAA,kDAAA,ilBAAA,6DAAA,mFAAA,plBACWnC,/CACA,kDAAA,lDAAC0C,gJAAmC8D,iBAAOL,/MAC3C,uNAAA,mFAAA,2CAAA,qDAAA,2DAAA,sDAAA,3fAACjG;;AAIb,yDAAA,zDAACR,6JAEA,cAAA+G,HAAKzG;AAAL,AAAA,IAAA0G,aAAAD;QAAA,AAAA1G,4CAAA2G,WAAA,IAAA,/DAAS/G;aAAT,AAAAI,4CAAA2G,WAAA,IAAA,pEAAWP;eAAX,AAAApG,4CAAA2G,WAAA,IAAA,tEAAkBvE;AAAlB,oGACMnC,/CACA,kDAAA,lDAAC0C,gJAAmC8D,iBAAOL,tNAC3C,8NAAA,mFAAA,2CAAA,qDAAA,uDAAA,sDAAA,vfAACjG;;AAIR,yDAAA,zDAACC,2IAEA,WAAAwG,SAAkBhH;AAAlB,AAAA,IAAAiH,aAAAD;IAAAC,iBAAA,AAAArG,4BAAAqG;SAAA,AAAApG,4CAAAoG,eAAA,hEAAa5G;AAAb,AAAA,kDAAA,gMAAA,iEAAA,2CAAA,uDAAA,mDAAA,mDAAA,sBAAA,0FAAA,iOAAA,iEAAA,mFAAA,0GAAA,gEAAA,mFAAA,3nCACO,iDAAA,yFAAA,1IAACE,8CAAMF,2bAGmB,AAAC0D,2GACD,+BAAA,2CAAA,8DAAA,xIAACC;;AAInC,yDAAA,zDAACjE,2JAEA,cAAAmH,HAAK7G;AAAL,AAAA,IAAA8G,aAAAD;QAAA,AAAA9G,4CAAA+G,WAAA,IAAA,/DAASnH;eAAT,AAAAI,4CAAA+G,WAAA,IAAA,tEAAWC;AAAX,mGACM/G,9CACA,iDAAA,yFAAA,1IAACE,rDACD,sMAAA,/LAACA,sRAA+B6G;;AAEvC,yDAAA,zDAACrH,yJAEA,cAAAsH,HAAKhH;AAAL,AAAA,IAAAiH,aAAAD;QAAA,AAAAjH,4CAAAkH,WAAA,IAAA,/DAAStH;eAAT,AAAAI,4CAAAkH,WAAA,IAAA,tEAAW9E;AAAX,mGACMnC,9CACA,iDAAA,yFAAA,1IAACE,rDACD,sMAAA,uFAAA,tRAACA;;AAGR,yDAAA,zDAACC,6JAEA,WAAA+G,SAAAC;AAAA,AAAA,IAAAC,aAAAF;IAAAE,iBAAA,AAAA7G,4BAAA6G;SAAA,AAAA5G,4CAAA4G,eAAA,hEAAapH;IAAbqH,aAAAF;QAAA,AAAApH,4CAAAsH,WAAA,IAAA,/DAAmB1H;iBAAnB,AAAAI,4CAAAsH,WAAA,IAAA,xEAAqBC;AAArB,AAAA,kDAAA,8QAAA,iEAAA,2CAAA,uDAAA,oDAAA,yJAAA,0FAAA,iOAAA,iEAAA,mFAAA,2HAAA,gEAAA,mFAAA,3yCACO,sBAAA,mFAAA,+GAAA,xNAACjD,mBAASrE,kLAA+BsH,mSAEf,CAAA,+EAAA,ZAA4BA,4FAC5B,AAAC5D,2GACD,+BAAA,2CAAA,8DAAA,xIAACC,kZACiC2D,+QACAA;;AAEpE,yDAAA,zDAACnH,iKAEA,WAAAoH,SAAAC;AAAA,AAAA,IAAAC,aAAAF;IAAAE,iBAAA,AAAAlH,4BAAAkH;SAAA,AAAAjH,4CAAAiH,eAAA,hEAAazH;IAAb0H,aAAAF;QAAA,AAAAzH,4CAAA2H,WAAA,IAAA,/DAAmB/H;iBAAnB,AAAAI,4CAAA2H,WAAA,IAAA,xEAAqBJ;eAArB,AAAAvH,4CAAA2H,WAAA,IAAA,tEAAgCvF;AAAhC,AAAA,kDAAA,olBAAA,6DAAA,mFAAA,vlBACWnC,/CACA,kDAAA,lDAAC0C,8IAAkC8D,iBAAOc,7MAC1C,yNAAA,mFAAA,2CAAA,qDAAA,2DAAA,sDAAA,7fAACpH;;AAIb,yDAAA,zDAACR,kKAEA,cAAAiI,HAAK3H;AAAL,AAAA,IAAA4H,aAAAD;QAAA,AAAA5H,4CAAA6H,WAAA,IAAA,/DAASjI;iBAAT,AAAAI,4CAAA6H,WAAA,IAAA,xEAAWN;eAAX,AAAAvH,4CAAA6H,WAAA,IAAA,tEAAsBzF;AAAtB,oGACMnC,/CACA,kDAAA,lDAAC0C,8IAAkC8D,iBAAOc,pNAC1C,gOAAA,mFAAA,2CAAA,qDAAA,uDAAA,sDAAA,zfAACpH","names":["re_frame.core.reg_event_db","_","cogito.db/default-db","p__11444","vec__11445","cljs.core.nth","db","prompt","cljs.core.assoc","re_frame.core.reg_event_fx","p__11448","p__11449","map__11450","cljs.core/--destructure-map","cljs.core.get","vec__11451","most-recent-turn","cljs.core/last","response-context","and__5000__auto__","cljs.core._EQ_","cljs.core.get_in","turn-id","current-index","alternatives","selected-alt","re-frame.core/reg-fx","p__11479","map__11480","conversation-id","context","js/fetch","cljs.core/clj->js","js/JSON.stringify","p1__11476#","p1__11477#","re-frame.core/dispatch","cljs.core.js__GT_clj","p1__11478#","p__11486","vec__11487","response","parsed-response","e11490","js/eval","js/Error","e","or__5002__auto__","cljs.core.update","cljs.core/conj","p__11492","vec__11493","error","p1__11496#","p1__11497#","p__11498","vec__11499","p__11502","vec__11503","p__11507","p__11508","map__11509","vec__11510","client-id","ajax.core/json-request-format","ajax.core/json-response-format","p__11514","vec__11515","p__11518","vec__11519","p__11522","map__11523","p__11524","vec__11525","index","cljs.core/assoc-in","p__11528","vec__11529","p__11532","vec__11533","tab","p__11536","p__11537","map__11538","vec__11539","form-data","cljs.core.dissoc","p__11542","p__11543","map__11544","vec__11545","p__11548","vec__11549","error-message","p__11552","map__11553","p__11554","vec__11555","bots","p__11558","vec__11559","p__11562","p__11563","map__11564","vec__11565","bot-id","p__11568","p__11569","map__11570","vec__11571","cljs.core/dissoc","p__11574","vec__11575","p__11578","map__11579","p__11580","vec__11581","meetings","p__11584","vec__11585","p__11588","p__11589","map__11590","vec__11591","meeting-id","p__11594","p__11595","map__11596","vec__11597","p__11600","vec__11601"],"sourcesContent":["(ns cogito.events\n  (:require [re-frame.core :as rf]\n            [cogito.db :as db]\n            [ajax.core :as ajax]\n            [day8.re-frame.http-fx]))\n\n(rf/reg-event-db\n :initialize-db\n (fn [_ _]\n   db/default-db))\n\n(rf/reg-event-db\n :set-current-prompt\n (fn [db [_ prompt]]\n   (assoc db :current-prompt prompt)))\n\n(rf/reg-event-fx\n :submit-prompt\n (fn [{:keys [db]} [_ prompt]]\n   ;; Find the most recent response-set and include current alternative context\n   (let [most-recent-turn (last (:turns db))\n         response-context (when (and most-recent-turn \n                                    (= :response-set (get-in most-recent-turn [:response :response-type])))\n                           (let [turn-id (:id most-recent-turn)\n                                 current-index (get-in db [:alternative-indices turn-id] 0)\n                                 alternatives (get-in most-recent-turn [:response :alternatives])\n                                 selected-alt (nth alternatives current-index nil)]\n                             {:responding-to-alternative {:turn-id turn-id\n                                                         :alternative-index current-index\n                                                         :alternative-id (:id selected-alt)\n                                                         :alternative-summary (:summary selected-alt)}}))]\n     {:db (assoc db :loading? true)\n      :fetch-response {:prompt prompt\n                       :conversation-id (:conversation-id db)\n                       :context response-context}})))\n\n(rf/reg-fx\n :fetch-response\n (fn [{:keys [prompt conversation-id context]}]\n   (-> (js/fetch \"/api/conversational-turn\"\n                 (clj->js {:method \"POST\"\n                           :headers {\"Content-Type\" \"application/json\"}\n                           :credentials \"include\"\n                           :body (js/JSON.stringify (clj->js {:content prompt\n                                                             :conversation_id conversation-id\n                                                             :context context}))}))\n       (.then #(.json %))\n       (.then #(rf/dispatch [:handle-llm-response (js->clj % :keywordize-keys true)]))\n       (.catch #(rf/dispatch [:handle-error %])))))\n\n(rf/reg-event-db\n :handle-llm-response\n (fn [db [_ response]]\n   (let [parsed-response (try\n                          ;; Try to parse the ClojureScript response\n                          (js/eval (str \"(\" (:response response) \")\"))\n                          (catch js/Error e\n                            {:response-type :text\n                             :content (str \"Parse error: \" (:response response))}))]\n     (-> db\n         (assoc :loading? false\n                :current-prompt \"\"\n                :conversation-id (or (:conversation-id response) \n                                    (:conversation-id db)))\n         (update :turns conj {:id (:id response)\n                             :prompt (:prompt response)\n                             :response parsed-response})))))\n\n(rf/reg-event-db\n :handle-error\n (fn [db [_ error]]\n   (assoc db :loading? false\n            :error error)))\n\n(rf/reg-event-fx\n :check-auth-status\n (fn [_ _]\n   {:fetch-auth-status {}}))\n\n(rf/reg-fx\n :fetch-auth-status\n (fn [_]\n   (-> (js/fetch \"/api/auth-status\"\n                 (clj->js {:credentials \"include\"}))\n       (.then #(.json %))\n       (.then #(rf/dispatch [:auth-status-received (js->clj % :keywordize-keys true)]))\n       (.catch #(rf/dispatch [:auth-status-received {:authenticated false}])))))\n\n(rf/reg-event-db\n :auth-status-received\n (fn [db [_ response]]\n   (assoc db :authenticated? (:authenticated response)\n             :pending-client-selection? (:pendingClientSelection response)\n             :available-clients (:clients response)\n             :user (:user response))))\n\n(rf/reg-event-db\n :login-success\n (fn [db [_ response]]\n   (if (:clients response)\n     ;; Multiple clients - show selection\n     (assoc db :authenticated? false\n               :pending-client-selection? true\n               :available-clients (:clients response))\n     ;; Single client - auto login  \n     (assoc db :authenticated? true\n               :user (:user response)))))\n\n;; Client selection events\n(rf/reg-event-fx\n :select-client\n (fn [{:keys [db]} [_ client-id]]\n   {:db (assoc db :selecting-client? true)\n    :http-xhrio {:method :post\n                 :uri \"/api/select-client\"\n                 :headers {\"Content-Type\" \"application/json\"}\n                 :params {:client_id client-id}\n                 :format (ajax/json-request-format)\n                 :response-format (ajax/json-response-format {:keywords? true})\n                 :on-success [:client-selected]\n                 :on-failure [:client-selection-failed]}}))\n\n(rf/reg-event-db\n :client-selected\n (fn [db [_ response]]\n   (assoc db :authenticated? true\n             :pending-client-selection? false\n             :selecting-client? false\n             :available-clients nil\n             :user (:user response))))\n\n(rf/reg-event-db\n :client-selection-failed\n (fn [db [_ error]]\n   (assoc db :selecting-client? false\n             :client-selection-error \"Failed to select client\")))\n\n;; Logout event\n(rf/reg-event-fx\n :logout\n (fn [{:keys [db]} _]\n   {:db (assoc db :logging-out? true)\n    :http-xhrio {:method :post\n                 :uri \"/api/logout\"\n                 :headers {\"Content-Type\" \"application/json\"}\n                 :format (ajax/json-request-format)\n                 :response-format (ajax/json-response-format {:keywords? true})\n                 :on-success [:logout-success]\n                 :on-failure [:logout-success]}})) ; Treat failure as success for logout\n\n(rf/reg-event-db\n :logout-success\n (fn [db _]\n   {:authenticated? false\n    :pending-client-selection? false\n    :user nil\n    :available-clients nil\n    :logging-out? false\n    :turns []\n    :current-prompt \"\"}))\n\n;; Alternative index tracking for response sets\n(rf/reg-event-db\n :set-current-alternative\n (fn [db [_ turn-id index]]\n   (assoc-in db [:alternative-indices turn-id] index)))\n\n;; Get the currently selected alternative for a given turn\n(rf/reg-event-db\n :get-current-alternative\n (fn [db [_ turn-id]]\n   (get-in db [:alternative-indices turn-id] 0)))\n\n;; Workbench tab management\n(rf/reg-event-db\n :workbench/set-active-tab\n (fn [db [_ tab]]\n   (assoc db :workbench/active-tab tab)))\n\n;; Bot creation events\n(rf/reg-event-fx\n :bot-creation/create-bot\n (fn [{:keys [db]} [_ form-data]]\n   {:db (-> db\n            (assoc :bot-creation/loading? true)\n            (dissoc :bot-creation/message))\n    :http-xhrio {:method          :post\n                 :uri             \"/api/create-bot\"\n                 :params          {:meeting_url (:meeting-url form-data)\n                                   :meeting_name (:meeting-name form-data)}\n                 :format          (ajax/json-request-format)\n                 :response-format (ajax/json-response-format {:keywords? true})\n                 :on-success      [:bot-creation/create-success]\n                 :on-failure      [:bot-creation/create-failure]}}))\n\n(rf/reg-event-fx\n :bot-creation/create-success\n (fn [{:keys [db]} [_ response]]\n   {:db (-> db\n            (assoc :bot-creation/loading? false)\n            (assoc :bot-creation/message {:type :success\n                                         :text \"Bot created successfully! The bot will join your meeting.\"})\n            (update :bot-creation/bots conj response))\n    :dispatch [:bot-creation/fetch-bots]}))\n\n(rf/reg-event-db\n :bot-creation/create-failure\n (fn [db [_ response]]\n   (let [error-message (or (get-in response [:response :error])\n                          \"Failed to create bot. Please try again.\")]\n     (-> db\n         (assoc :bot-creation/loading? false)\n         (assoc :bot-creation/message {:type :error\n                                       :text error-message})))))\n\n;; Fetch running bots\n(rf/reg-event-fx\n :bot-creation/fetch-bots\n (fn [{:keys [db]} _]\n   {:db (assoc db :bot-creation/fetching-bots? true)\n    :http-xhrio {:method          :get\n                 :uri             \"/api/bots\"\n                 :format          (ajax/json-request-format)\n                 :response-format (ajax/json-response-format {:keywords? true})\n                 :on-success      [:bot-creation/fetch-bots-success]\n                 :on-failure      [:bot-creation/fetch-bots-failure]}}))\n\n(rf/reg-event-db\n :bot-creation/fetch-bots-success\n (fn [db [_ bots]]\n   (-> db\n       (assoc :bot-creation/fetching-bots? false)\n       (assoc :bot-creation/running-bots bots))))\n\n(rf/reg-event-db\n :bot-creation/fetch-bots-failure\n (fn [db [_ response]]\n   (-> db\n       (assoc :bot-creation/fetching-bots? false)\n       (assoc :bot-creation/running-bots []))))\n\n;; Shutdown bot\n(rf/reg-event-fx\n :bot-creation/shutdown-bot\n (fn [{:keys [db]} [_ bot-id]]\n   {:db (assoc-in db [:bot-creation/shutting-down bot-id] true)\n    :http-xhrio {:method          :post\n                 :uri             (str \"/api/bots/\" bot-id \"/leave\")\n                 :format          (ajax/json-request-format)\n                 :response-format (ajax/json-response-format {:keywords? true})\n                 :on-success      [:bot-creation/shutdown-success bot-id]\n                 :on-failure      [:bot-creation/shutdown-failure bot-id]}}))\n\n(rf/reg-event-fx\n :bot-creation/shutdown-success\n (fn [{:keys [db]} [_ bot-id response]]\n   {:db (-> db\n            (update :bot-creation/shutting-down dissoc bot-id)\n            (assoc :bot-creation/message {:type :success\n                                         :text \"Bot shut down successfully\"}))\n    :dispatch [:bot-creation/fetch-bots]}))\n\n(rf/reg-event-db\n :bot-creation/shutdown-failure\n (fn [db [_ bot-id response]]\n   (-> db\n       (update :bot-creation/shutting-down dissoc bot-id)\n       (assoc :bot-creation/message {:type :error\n                                     :text \"Failed to shut down bot\"}))))\n\n;; Stuck meetings events\n(rf/reg-event-fx\n :stuck-meetings/fetch\n (fn [{:keys [db]} _]\n   {:db (assoc db :stuck-meetings/fetching? true)\n    :http-xhrio {:method          :get\n                 :uri             \"/api/stuck-meetings\"\n                 :format          (ajax/json-request-format)\n                 :response-format (ajax/json-response-format {:keywords? true})\n                 :on-success      [:stuck-meetings/fetch-success]\n                 :on-failure      [:stuck-meetings/fetch-failure]}}))\n\n(rf/reg-event-db\n :stuck-meetings/fetch-success\n (fn [db [_ meetings]]\n   (-> db\n       (assoc :stuck-meetings/fetching? false)\n       (assoc :stuck-meetings/meetings meetings))))\n\n(rf/reg-event-db\n :stuck-meetings/fetch-failure\n (fn [db [_ response]]\n   (-> db\n       (assoc :stuck-meetings/fetching? false)\n       (assoc :stuck-meetings/meetings []))))\n\n;; Force complete stuck meeting\n(rf/reg-event-fx\n :stuck-meetings/force-complete\n (fn [{:keys [db]} [_ meeting-id]]\n   {:db (assoc-in db [:stuck-meetings/completing meeting-id] true)\n    :http-xhrio {:method          :post\n                 :uri             (str \"/api/stuck-meetings/\" meeting-id \"/complete\")\n                 :format          (ajax/json-request-format)\n                 :response-format (ajax/json-response-format {:keywords? true})\n                 :on-success      [:stuck-meetings/complete-success meeting-id]\n                 :on-failure      [:stuck-meetings/complete-failure meeting-id]}}))\n\n(rf/reg-event-fx\n :stuck-meetings/complete-success\n (fn [{:keys [db]} [_ meeting-id response]]\n   {:db (-> db\n            (update :stuck-meetings/completing dissoc meeting-id)\n            (assoc :bot-creation/message {:type :success\n                                         :text \"Meeting marked as completed\"}))\n    :dispatch [:stuck-meetings/fetch]}))\n\n(rf/reg-event-db\n :stuck-meetings/complete-failure\n (fn [db [_ meeting-id response]]\n   (-> db\n       (update :stuck-meetings/completing dissoc meeting-id)\n       (assoc :bot-creation/message {:type :error\n                                     :text \"Failed to complete meeting\"}))))"]}