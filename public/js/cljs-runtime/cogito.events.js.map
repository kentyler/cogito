{"version":3,"sources":["cogito/events.cljs"],"mappings":"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","names":["re_frame.core.reg_event_db","_","cogito.db/default-db","p__12115","vec__12116","cljs.core.nth","db","prompt","cljs.core.assoc","re_frame.core.reg_event_fx","p__12119","p__12120","map__12121","cljs.core/--destructure-map","cljs.core.get","vec__12122","most-recent-turn","cljs.core/last","response-context","and__5000__auto__","cljs.core._EQ_","cljs.core.get_in","turn-id","current-index","alternatives","selected-alt","re-frame.core/reg-fx","p__12128","map__12129","context","js/fetch","cljs.core/clj->js","js/JSON.stringify","p1__12125#","p1__12126#","re-frame.core/dispatch","cljs.core.js__GT_clj","p1__12127#","p__12130","vec__12131","response","js/console.log","parsed-response","cogito.edn-parser/parse-cljs-response","cljs.core.update","cljs.core/conj","p__12134","vec__12135","error","p1__12138#","p1__12139#","p__12140","vec__12141","p__12144","vec__12145","p__12148","p__12149","map__12150","vec__12151","client-id","ajax.core/json-request-format","ajax.core/json-response-format","p__12154","vec__12155","p__12158","vec__12159","p__12162","map__12163","p__12164","map__12165","p__12166","vec__12167","p__12170","vec__12171","p__12174","p__12175","map__12176","vec__12177","p__12180","p__12181","map__12182","vec__12183","cljs.core.dissoc","p__12186","vec__12187","p__12190","p__12191","map__12192","vec__12193","meeting-id","p__12196","vec__12197","index","cljs.core/assoc-in","p__12200","vec__12201","p__12204","vec__12205","tab","p__12208","p__12209","map__12210","vec__12211","form-data","p__12214","p__12215","map__12216","vec__12217","p__12220","vec__12221","error-message","or__5002__auto__","p__12224","map__12225","p__12226","vec__12227","bots","p__12230","vec__12231","p__12234","p__12235","map__12236","vec__12237","bot-id","p__12240","p__12241","map__12242","vec__12243","cljs.core/dissoc","p__12246","vec__12247","p__12250","vec__12251","meeting","p__12254","p__12255","map__12256","vec__12257","meeting-name","p__12260","p__12261","map__12262","vec__12263","p__12266","vec__12267","p__12270","map__12271","p__12272","vec__12273","meetings","p__12276","vec__12277","p__12280","p__12281","map__12282","vec__12283","p__12286","p__12287","map__12288","vec__12289","p__12292","vec__12293","p__12296","vec__12297","date","p__12300","p__12301","map__12302","vec__12303","year","current-date","js/Date","new-date","p__12306","p__12307","map__12308","vec__12309","month","p__12312","vec__12313","loading?","p__12316","vec__12317","data","p__12320","map__12321","selected-date","today","p__12322","vec__12323","p__12326","vec__12327","p__12330","map__12331","previous-date","p__12332","map__12333","next-date","p__12334","map__12335","p__12336","vec__12337","p__12340","vec__12341","p__12344","p__12345","map__12346","vec__12347","target-year","target-month","p__12350","vec__12351","p__12354","vec__12355","p__12358","p__12359","map__12360","vec__12361","p__12364","vec__12365","p__12368","vec__12369","p__12372","p__12373","map__12374","vec__12375","file-list","files","cljs.core.array_seq","p__12381","map__12382","seq__12383","cljs.core/seq","chunk__12384","count__12385","i__12386","temp__5804__auto__","cljs.core/chunked-seq?","c__5525__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","file","js/FormData","p1__12378#","p1__12379#","p1__12380#","p__12387","p__12388","map__12389","vec__12390","file-data","p__12393","vec__12394","p__12397","map__12398","p__12399","vec__12400","p__12403","vec__12404","p__12407","p__12408","map__12409","vec__12410","p__12413","vec__12414","file-with-content","p__12417","vec__12418","p__12421","p__12422","map__12423","vec__12424","file-id","p__12427","p__12428","map__12429","vec__12430","cljs.core.update_in","p__12433","vec__12434","p__12437","p__12438","map__12439","vec__12440","map__12443","title","content","p__12444","p__12445","map__12446","vec__12447","p__12450","vec__12451","p__12454","vec__12455","p__12458","vec__12459","p__12462","map__12463","p__12464","vec__12465","dates","p__12468","vec__12469","p__12472","p__12473","map__12474","vec__12475","p__12478","vec__12479","transcript-data","p__12482","vec__12483"],"sourcesContent":["(ns cogito.events\n  (:require [re-frame.core :as rf]\n            [cogito.db :as db]\n            [ajax.core :as ajax]\n            [day8.re-frame.http-fx]\n            [cogito.edn-parser :as parser]))\n\n(rf/reg-event-db\n :initialize-db\n (fn [_ _]\n   db/default-db))\n\n(rf/reg-event-db\n :set-current-prompt\n (fn [db [_ prompt]]\n   (assoc db :current-prompt prompt)))\n\n(rf/reg-event-fx\n :submit-prompt\n (fn [{:keys [db]} [_ prompt]]\n   ;; Find the most recent response-set and include current alternative context\n   (let [most-recent-turn (last (:turns db))\n         response-context (when (and most-recent-turn \n                                    (= :response-set (get-in most-recent-turn [:response :response-type])))\n                           (let [turn-id (:id most-recent-turn)\n                                 current-index (get-in db [:alternative-indices turn-id] 0)\n                                 alternatives (get-in most-recent-turn [:response :alternatives])\n                                 selected-alt (nth alternatives current-index nil)]\n                             {:responding-to-alternative {:turn-id turn-id\n                                                         :alternative-index current-index\n                                                         :alternative-id (:id selected-alt)\n                                                         :alternative-summary (:summary selected-alt)}}))]\n     {:db (assoc db :loading? true)\n      :fetch-response {:prompt prompt\n                       :context response-context}})))\n\n(rf/reg-fx\n :fetch-response\n (fn [{:keys [prompt context]}]\n   (-> (js/fetch \"/api/conversational-turn\"\n                 (clj->js {:method \"POST\"\n                           :headers {\"Content-Type\" \"application/json\"}\n                           :credentials \"include\"\n                           :body (js/JSON.stringify (clj->js {:content prompt\n                                                             :context context}))}))\n       (.then #(.json %))\n       (.then #(rf/dispatch [:handle-llm-response (js->clj % :keywordize-keys true)]))\n       (.catch #(rf/dispatch [:handle-error %])))))\n\n(rf/reg-event-db\n :handle-llm-response\n (fn [db [_ response]]\n   (js/console.log \"Events: Received response from server:\" response)\n   (let [parsed-response (parser/parse-cljs-response (:response response))]\n     (js/console.log \"Events: Parsed response:\" parsed-response)\n     (-> db\n         (assoc :loading? false\n                :current-prompt \"\")\n         (update :turns conj {:id (:id response)\n                             :prompt (:prompt response)\n                             :response parsed-response})))))\n\n(rf/reg-event-db\n :handle-error\n (fn [db [_ error]]\n   (assoc db :loading? false\n            :error error)))\n\n(rf/reg-event-fx\n :check-auth-status\n (fn [_ _]\n   {:fetch-auth-status {}}))\n\n(rf/reg-fx\n :fetch-auth-status\n (fn [_]\n   (-> (js/fetch \"/api/auth-status\"\n                 (clj->js {:credentials \"include\"}))\n       (.then #(.json %))\n       (.then #(rf/dispatch [:auth-status-received (js->clj % :keywordize-keys true)]))\n       (.catch #(rf/dispatch [:auth-status-received {:authenticated false}])))))\n\n(rf/reg-event-db\n :auth-status-received\n (fn [db [_ response]]\n   (assoc db :authenticated? (:authenticated response)\n             :pending-client-selection? (:pendingClientSelection response)\n             :available-clients (:clients response)\n             :user (:user response))))\n\n(rf/reg-event-db\n :login-success\n (fn [db [_ response]]\n   (if (:clients response)\n     ;; Multiple clients - show selection\n     (assoc db :authenticated? false\n               :pending-client-selection? true\n               :available-clients (:clients response))\n     ;; Single client - auto login  \n     (assoc db :authenticated? true\n               :user (:user response)))))\n\n;; Client selection events\n(rf/reg-event-fx\n :select-client\n (fn [{:keys [db]} [_ client-id]]\n   {:db (assoc db :selecting-client? true)\n    :http-xhrio {:method :post\n                 :uri \"/api/select-client\"\n                 :headers {\"Content-Type\" \"application/json\"}\n                 :params {:client_id client-id}\n                 :format (ajax/json-request-format)\n                 :response-format (ajax/json-response-format {:keywords? true})\n                 :on-success [:client-selected]\n                 :on-failure [:client-selection-failed]}}))\n\n(rf/reg-event-db\n :client-selected\n (fn [db [_ response]]\n   (assoc db :authenticated? true\n             :pending-client-selection? false\n             :selecting-client? false\n             :available-clients nil\n             :user (:user response))))\n\n(rf/reg-event-db\n :client-selection-failed\n (fn [db [_ error]]\n   (assoc db :selecting-client? false\n             :client-selection-error \"Failed to select client\")))\n\n;; Logout event\n(rf/reg-event-fx\n :logout\n (fn [{:keys [db]} _]\n   {:db (assoc db :logging-out? true)\n    :http-xhrio {:method :post\n                 :uri \"/api/logout\"\n                 :headers {\"Content-Type\" \"application/json\"}\n                 :format (ajax/json-request-format)\n                 :response-format (ajax/json-response-format {:keywords? true})\n                 :on-success [:logout-success]\n                 :on-failure [:logout-success]}})) ; Treat failure as success for logout\n\n;; Fetch available clients for current user\n(rf/reg-event-fx\n :fetch-available-clients\n (fn [{:keys [db]} _]\n   {:http-xhrio {:method :get\n                 :uri \"/api/available-clients\"\n                 :headers {\"Content-Type\" \"application/json\"}\n                 :format (ajax/json-request-format)\n                 :response-format (ajax/json-response-format {:keywords? true})\n                 :on-success [:available-clients-received]\n                 :on-failure [:available-clients-failed]}}))\n\n(rf/reg-event-db\n :available-clients-received\n (fn [db [_ response]]\n   (assoc db :available-clients (:clients response)\n             :current-client-id (:current_client_id response))))\n\n(rf/reg-event-db\n :available-clients-failed\n (fn [db [_ error]]\n   (assoc db :available-clients-error \"Failed to fetch available clients\")))\n\n;; Switch client\n(rf/reg-event-fx\n :switch-client\n (fn [{:keys [db]} [_ client-id]]\n   {:db (assoc db :switching-client? true)\n    :http-xhrio {:method :post\n                 :uri \"/api/switch-client\"\n                 :headers {\"Content-Type\" \"application/json\"}\n                 :params {:client_id client-id}\n                 :format (ajax/json-request-format)\n                 :response-format (ajax/json-response-format {:keywords? true})\n                 :on-success [:client-switched]\n                 :on-failure [:client-switch-failed]}}))\n\n(rf/reg-event-fx\n :client-switched\n (fn [{:keys [db]} [_ response]]\n   {:db (-> db \n            (assoc :switching-client? false\n                   :user (:user response))\n            (dissoc :meetings :meetings-error)  ; Clear old meetings data\n            (dissoc :selected-meeting)  ; Clear any selected meeting\n            (dissoc :bot-creation/bots :bot-creation/running-bots)  ; Clear old bot data\n            (dissoc :stuck-meetings/meetings))  ; Clear old stuck meetings\n    :dispatch-n [[:cogito.meetings/load-meetings]  ; Refresh meetings for new client\n                 [:bot-creation/fetch-bots]  ; Refresh bots for new client\n                 [:fetch-available-clients]]}))\n\n(rf/reg-event-db\n :client-switch-failed\n (fn [db [_ error]]\n   (assoc db :switching-client? false\n             :client-switch-error \"Failed to switch client\")))\n\n(rf/reg-event-db\n :logout-success\n (fn [db _]\n   {:authenticated? false\n    :pending-client-selection? false\n    :user nil\n    :available-clients nil\n    :logging-out? false\n    :turns []\n    :current-prompt \"\"}))\n\n;; Submit prompt with meeting context\n(rf/reg-event-fx\n :submit-meeting-prompt\n (fn [{:keys [db]} [_ prompt meeting-id]]\n   ;; Similar to submit-prompt but with meeting context\n   (let [most-recent-turn (last (:turns db))\n         response-context (when (and most-recent-turn \n                                    (= :response-set (get-in most-recent-turn [:response :response-type])))\n                           (let [turn-id (:id most-recent-turn)\n                                 current-index (get-in db [:alternative-indices turn-id] 0)\n                                 alternatives (get-in most-recent-turn [:response :alternatives])\n                                 selected-alt (nth alternatives current-index nil)]\n                             {:responding-to-alternative {:turn-id turn-id\n                                                         :alternative-index current-index\n                                                         :alternative-id (:id selected-alt)\n                                                         :alternative-summary (:summary selected-alt)}}))]\n     {:db (assoc db :loading? true)\n      :fetch-response {:prompt prompt\n                       :context response-context}})))\n\n;; Alternative index tracking for response sets\n(rf/reg-event-db\n :set-current-alternative\n (fn [db [_ turn-id index]]\n   (assoc-in db [:alternative-indices turn-id] index)))\n\n;; Get the currently selected alternative for a given turn\n(rf/reg-event-db\n :get-current-alternative\n (fn [db [_ turn-id]]\n   (get-in db [:alternative-indices turn-id] 0)))\n\n;; Workbench tab management\n(rf/reg-event-db\n :workbench/set-active-tab\n (fn [db [_ tab]]\n   (assoc db :workbench/active-tab tab)))\n\n;; Bot creation events\n(rf/reg-event-fx\n :bot-creation/create-bot\n (fn [{:keys [db]} [_ form-data]]\n   {:db (-> db\n            (assoc :bot-creation/loading? true)\n            (dissoc :bot-creation/message))\n    :http-xhrio {:method          :post\n                 :uri             \"/api/create-bot\"\n                 :params          {:meeting_url (:meeting-url form-data)\n                                   :meeting_name (:meeting-name form-data)}\n                 :format          (ajax/json-request-format)\n                 :response-format (ajax/json-response-format {:keywords? true})\n                 :on-success      [:bot-creation/create-success]\n                 :on-failure      [:bot-creation/create-failure]}}))\n\n(rf/reg-event-fx\n :bot-creation/create-success\n (fn [{:keys [db]} [_ response]]\n   {:db (-> db\n            (assoc :bot-creation/loading? false)\n            (assoc :bot-creation/message {:type :success\n                                         :text \"Bot created successfully! The bot will join your meeting.\"})\n            (update :bot-creation/bots conj response))\n    :dispatch [:bot-creation/fetch-bots]}))\n\n(rf/reg-event-db\n :bot-creation/create-failure\n (fn [db [_ response]]\n   (let [error-message (or (get-in response [:response :error])\n                          \"Failed to create bot. Please try again.\")]\n     (-> db\n         (assoc :bot-creation/loading? false)\n         (assoc :bot-creation/message {:type :error\n                                       :text error-message})))))\n\n;; Fetch running bots\n(rf/reg-event-fx\n :bot-creation/fetch-bots\n (fn [{:keys [db]} _]\n   {:db (assoc db :bot-creation/fetching-bots? true)\n    :http-xhrio {:method          :get\n                 :uri             \"/api/bots\"\n                 :format          (ajax/json-request-format)\n                 :response-format (ajax/json-response-format {:keywords? true})\n                 :on-success      [:bot-creation/fetch-bots-success]\n                 :on-failure      [:bot-creation/fetch-bots-failure]}}))\n\n(rf/reg-event-db\n :bot-creation/fetch-bots-success\n (fn [db [_ bots]]\n   (-> db\n       (assoc :bot-creation/fetching-bots? false)\n       (assoc :bot-creation/running-bots bots))))\n\n(rf/reg-event-db\n :bot-creation/fetch-bots-failure\n (fn [db [_ response]]\n   (-> db\n       (assoc :bot-creation/fetching-bots? false)\n       (assoc :bot-creation/running-bots []))))\n\n;; Shutdown bot\n(rf/reg-event-fx\n :bot-creation/shutdown-bot\n (fn [{:keys [db]} [_ bot-id]]\n   {:db (assoc-in db [:bot-creation/shutting-down bot-id] true)\n    :http-xhrio {:method          :post\n                 :uri             (str \"/api/bots/\" bot-id \"/leave\")\n                 :format          (ajax/json-request-format)\n                 :response-format (ajax/json-response-format {:keywords? true})\n                 :on-success      [:bot-creation/shutdown-success bot-id]\n                 :on-failure      [:bot-creation/shutdown-failure bot-id]}}))\n\n(rf/reg-event-fx\n :bot-creation/shutdown-success\n (fn [{:keys [db]} [_ bot-id response]]\n   {:db (-> db\n            (update :bot-creation/shutting-down dissoc bot-id)\n            (assoc :bot-creation/message {:type :success\n                                         :text \"Bot shut down successfully\"}))\n    :dispatch [:bot-creation/fetch-bots]}))\n\n(rf/reg-event-db\n :bot-creation/shutdown-failure\n (fn [db [_ bot-id response]]\n   (-> db\n       (update :bot-creation/shutting-down dissoc bot-id)\n       (assoc :bot-creation/message {:type :error\n                                     :text \"Failed to shut down bot\"}))))\n\n;; Meeting join/create events\n(rf/reg-event-db\n :join-meeting\n (fn [db [_ meeting]]\n   (assoc db :active-meeting meeting)))\n\n(rf/reg-event-fx\n :create-new-meeting\n (fn [{:keys [db]} [_ meeting-name]]\n   {:db (assoc db :creating-meeting? true)\n    :http-xhrio {:method          :post\n                 :uri             \"/api/meetings/create\"\n                 :params          {:meeting_name meeting-name}\n                 :format          (ajax/json-request-format)\n                 :response-format (ajax/json-response-format {:keywords? true})\n                 :on-success      [:meeting-created]\n                 :on-failure      [:meeting-creation-failed]}}))\n\n(rf/reg-event-fx\n :meeting-created\n (fn [{:keys [db]} [_ response]]\n   {:db (-> db\n            (assoc :creating-meeting? false)\n            (assoc :active-meeting (assoc response :block_id (:meeting_id response))))\n    :dispatch-n [[:cogito.meetings/load-meetings]\n                 [:workbench/set-active-tab :conversation]]}))\n\n(rf/reg-event-db\n :meeting-creation-failed\n (fn [db [_ error]]\n   (assoc db :creating-meeting? false\n             :meeting-creation-error error)))\n\n(rf/reg-event-db\n :leave-meeting\n (fn [db _]\n   (dissoc db :active-meeting)))\n\n;; Stuck meetings events\n(rf/reg-event-fx\n :stuck-meetings/fetch\n (fn [{:keys [db]} _]\n   {:db (assoc db :stuck-meetings/fetching? true)\n    :http-xhrio {:method          :get\n                 :uri             \"/api/stuck-meetings\"\n                 :format          (ajax/json-request-format)\n                 :response-format (ajax/json-response-format {:keywords? true})\n                 :on-success      [:stuck-meetings/fetch-success]\n                 :on-failure      [:stuck-meetings/fetch-failure]}}))\n\n(rf/reg-event-db\n :stuck-meetings/fetch-success\n (fn [db [_ meetings]]\n   (-> db\n       (assoc :stuck-meetings/fetching? false)\n       (assoc :stuck-meetings/meetings meetings))))\n\n(rf/reg-event-db\n :stuck-meetings/fetch-failure\n (fn [db [_ response]]\n   (-> db\n       (assoc :stuck-meetings/fetching? false)\n       (assoc :stuck-meetings/meetings []))))\n\n;; Force complete stuck meeting\n(rf/reg-event-fx\n :stuck-meetings/force-complete\n (fn [{:keys [db]} [_ meeting-id]]\n   {:db (assoc-in db [:stuck-meetings/completing meeting-id] true)\n    :http-xhrio {:method          :post\n                 :uri             (str \"/api/stuck-meetings/\" meeting-id \"/complete\")\n                 :format          (ajax/json-request-format)\n                 :response-format (ajax/json-response-format {:keywords? true})\n                 :on-success      [:stuck-meetings/complete-success meeting-id]\n                 :on-failure      [:stuck-meetings/complete-failure meeting-id]}}))\n\n(rf/reg-event-fx\n :stuck-meetings/complete-success\n (fn [{:keys [db]} [_ meeting-id response]]\n   {:db (-> db\n            (update :stuck-meetings/completing dissoc meeting-id)\n            (assoc :bot-creation/message {:type :success\n                                         :text \"Meeting marked as completed\"}))\n    :dispatch [:stuck-meetings/fetch]}))\n\n(rf/reg-event-db\n :stuck-meetings/complete-failure\n (fn [db [_ meeting-id response]]\n   (-> db\n       (update :stuck-meetings/completing dissoc meeting-id)\n       (assoc :bot-creation/message {:type :error\n                                     :text \"Failed to complete meeting\"}))))\n\n;; Daily Summary Events\n(rf/reg-event-db\n :daily-summary/set-selected-date\n (fn [db [_ date]]\n   (assoc-in db [:daily-summary :selected-date] date)))\n\n(rf/reg-event-fx\n :daily-summary/set-selected-year\n (fn [{:keys [db]} [_ year]]\n   (let [current-date (js/Date. (get-in db [:daily-summary :selected-date]))\n         new-date (js/Date. year (.getMonth current-date) (.getDate current-date))]\n     {:db (assoc-in db [:daily-summary :selected-date] (.toISOString new-date))\n      :dispatch [:daily-summary/load-day]})))\n\n(rf/reg-event-fx\n :daily-summary/set-selected-month\n (fn [{:keys [db]} [_ month]]\n   (let [current-date (js/Date. (get-in db [:daily-summary :selected-date]))\n         new-date (js/Date. (.getFullYear current-date) month (.getDate current-date))]\n     {:db (assoc-in db [:daily-summary :selected-date] (.toISOString new-date))\n      :dispatch [:daily-summary/load-day]})))\n\n(rf/reg-event-db\n :daily-summary/set-loading\n (fn [db [_ loading?]]\n   (assoc-in db [:daily-summary :loading?] loading?)))\n\n(rf/reg-event-db\n :daily-summary/set-data\n (fn [db [_ data]]\n   (assoc-in db [:daily-summary :data] data)))\n\n(rf/reg-event-fx\n :daily-summary/load-day\n (fn [{:keys [db]} _]\n   (let [selected-date (get-in db [:daily-summary :selected-date] \n                              (let [today (js/Date.)]\n                                (.setHours today 0 0 0 0)\n                                (.toISOString today)))]\n     {:db (assoc-in db [:daily-summary :loading?] true)\n      :http-xhrio {:method :get\n                   :uri (str \"/api/daily-summary/\" (.substring selected-date 0 10))\n                   :response-format (ajax/json-response-format {:keywords? true})\n                   :on-success [:daily-summary/load-success]\n                   :on-failure [:daily-summary/load-failure]}})))\n\n(rf/reg-event-db\n :daily-summary/load-success\n (fn [db [_ response]]\n   (-> db\n       (assoc-in [:daily-summary :loading?] false)\n       (assoc-in [:daily-summary :data] response))))\n\n(rf/reg-event-db\n :daily-summary/load-failure\n (fn [db [_ error]]\n   (-> db\n       (assoc-in [:daily-summary :loading?] false)\n       (assoc-in [:daily-summary :data] nil))))\n\n(rf/reg-event-fx\n :daily-summary/previous-day\n (fn [{:keys [db]} _]\n   (let [current-date (js/Date. (get-in db [:daily-summary :selected-date]))\n         previous-date (js/Date. (.setDate current-date (dec (.getDate current-date))))]\n     {:db (assoc-in db [:daily-summary :selected-date] (.toISOString previous-date))\n      :dispatch [:daily-summary/load-day]})))\n\n(rf/reg-event-fx\n :daily-summary/next-day\n (fn [{:keys [db]} _]\n   (let [current-date (js/Date. (get-in db [:daily-summary :selected-date]))\n         next-date (js/Date. (.setDate current-date (inc (.getDate current-date))))]\n     {:db (assoc-in db [:daily-summary :selected-date] (.toISOString next-date))\n      :dispatch [:daily-summary/load-day]})))\n\n(rf/reg-event-fx\n :daily-summary/generate-summary\n (fn [{:keys [db]} _]\n   (let [selected-date (get-in db [:daily-summary :selected-date])]\n     {:db (assoc-in db [:daily-summary :summary :generating?] true)\n      :http-xhrio {:method :post\n                   :uri \"/api/generate-daily-summary\"\n                   :params {:date (.substring selected-date 0 10)}\n                   :format (ajax/json-request-format)\n                   :response-format (ajax/json-response-format {:keywords? true})\n                   :on-success [:daily-summary/summary-success]\n                   :on-failure [:daily-summary/summary-failure]}})))\n\n(rf/reg-event-db\n :daily-summary/summary-success\n (fn [db [_ response]]\n   (-> db\n       (assoc-in [:daily-summary :summary :generating?] false)\n       (assoc-in [:daily-summary :summary :content] (:summary response)))))\n\n(rf/reg-event-db\n :daily-summary/summary-failure\n (fn [db [_ error]]\n   (-> db\n       (assoc-in [:daily-summary :summary :generating?] false)\n       (assoc-in [:daily-summary :summary :content] \"Failed to generate summary. Please try again.\"))))\n\n;; Monthly summary generation\n(rf/reg-event-fx\n :daily-summary/generate-monthly-summaries\n (fn [{:keys [db]} [_ year month]]\n   (let [target-year (or year (.getFullYear (js/Date.)))\n         target-month (or month (.getMonth (js/Date.)))]\n     {:db (assoc-in db [:daily-summary :monthly-summaries :generating?] true)\n      :http-xhrio {:method :post\n                   :uri \"/api/generate-monthly-summaries\"\n                   :params {:year target-year :month target-month}\n                   :format (ajax/json-request-format)\n                   :response-format (ajax/json-response-format {:keywords? true})\n                   :on-success [:daily-summary/monthly-summaries-success]\n                   :on-failure [:daily-summary/monthly-summaries-failure]}})))\n\n(rf/reg-event-db\n :daily-summary/monthly-summaries-success\n (fn [db [_ response]]\n   (-> db\n       (assoc-in [:daily-summary :monthly-summaries :generating?] false)\n       (assoc-in [:daily-summary :monthly-summaries :data] (:summaries response))\n       (assoc-in [:daily-summary :monthly-summaries :year] (:year response))\n       (assoc-in [:daily-summary :monthly-summaries :month] (:month response)))))\n\n(rf/reg-event-db\n :daily-summary/monthly-summaries-failure\n (fn [db [_ error]]\n   (-> db\n       (assoc-in [:daily-summary :monthly-summaries :generating?] false)\n       (assoc-in [:daily-summary :monthly-summaries :data] nil))))\n\n;; Monthly Summary Events (yearly summaries)\n(rf/reg-event-fx\n :monthly-summary/generate-yearly-summaries\n (fn [{:keys [db]} [_ year]]\n   (let [target-year (or year (.getFullYear (js/Date.)))]\n     {:db (assoc-in db [:monthly-summary :yearly-summaries :generating?] true)\n      :http-xhrio {:method :post\n                   :uri \"/api/generate-yearly-summaries\"\n                   :params {:year target-year}\n                   :format (ajax/json-request-format)\n                   :response-format (ajax/json-response-format {:keywords? true})\n                   :on-success [:monthly-summary/yearly-summaries-success]\n                   :on-failure [:monthly-summary/yearly-summaries-failure]}})))\n\n(rf/reg-event-db\n :monthly-summary/yearly-summaries-success\n (fn [db [_ response]]\n   (-> db\n       (assoc-in [:monthly-summary :yearly-summaries :generating?] false)\n       (assoc-in [:monthly-summary :yearly-summaries :data] (:summaries response))\n       (assoc-in [:monthly-summary :yearly-summaries :year] (:year response)))))\n\n(rf/reg-event-db\n :monthly-summary/yearly-summaries-failure\n (fn [db [_ error]]\n   (-> db\n       (assoc-in [:monthly-summary :yearly-summaries :generating?] false)\n       (assoc-in [:monthly-summary :yearly-summaries :data] nil))))\n\n;; Upload Files Events\n(rf/reg-event-fx\n :upload-files/handle-files\n (fn [{:keys [db]} [_ file-list]]\n   (let [files (array-seq file-list)]\n     {:db (assoc-in db [:upload-files :uploading?] true)\n      :upload-files-to-server {:files files}})))\n\n(rf/reg-fx\n :upload-files-to-server\n (fn [{:keys [files]}]\n   (doseq [file files]\n     (let [form-data (js/FormData.)]\n       (.append form-data \"file\" file)\n       (-> (js/fetch \"/api/upload-files/upload\"\n                     (clj->js {:method \"POST\"\n                               :credentials \"include\"\n                               :body form-data}))\n           (.then #(.json %))\n           (.then #(rf/dispatch [:upload-files/file-uploaded (js->clj % :keywordize-keys true)]))\n           (.catch #(rf/dispatch [:upload-files/upload-failed (.-message %)])))))))\n\n(rf/reg-event-fx\n :upload-files/file-uploaded\n (fn [{:keys [db]} [_ file-data]]\n   {:db (assoc-in db [:upload-files :uploading?] false)\n    :dispatch [:upload-files/load-files]}))\n\n(rf/reg-event-db\n :upload-files/upload-failed\n (fn [db [_ error]]\n   (-> db\n       (assoc-in [:upload-files :uploading?] false)\n       (assoc-in [:upload-files :error] error))))\n\n(rf/reg-event-fx\n :upload-files/load-files\n (fn [{:keys [db]} _]\n   {:http-xhrio {:method :get\n                 :uri \"/api/upload-files/files\"\n                 :response-format (ajax/json-response-format {:keywords? true})\n                 :on-success [:upload-files/files-loaded]\n                 :on-failure [:upload-files/files-load-failed]}}))\n\n(rf/reg-event-db\n :upload-files/files-loaded\n (fn [db [_ files]]\n   (assoc-in db [:upload-files :files] files)))\n\n(rf/reg-event-db\n :upload-files/files-load-failed\n (fn [db [_ error]]\n   (assoc-in db [:upload-files :error] \"Failed to load files\")))\n\n(rf/reg-event-fx\n :upload-files/select-file\n (fn [{:keys [db]} [_ file]]\n   {:db (assoc-in db [:upload-files :selected-file] file)\n    :http-xhrio {:method :get\n                 :uri (str \"/api/upload-files/files/\" (:id file))\n                 :response-format (ajax/json-response-format {:keywords? true})\n                 :on-success [:upload-files/file-content-loaded]\n                 :on-failure [:upload-files/file-content-failed]}}))\n\n(rf/reg-event-db\n :upload-files/file-content-loaded\n (fn [db [_ file-with-content]]\n   (assoc-in db [:upload-files :selected-file] file-with-content)))\n\n(rf/reg-event-db\n :upload-files/file-content-failed\n (fn [db [_ error]]\n   (assoc-in db [:upload-files :content-error] \"Failed to load file content\")))\n\n(rf/reg-event-fx\n :upload-files/delete-file\n (fn [{:keys [db]} [_ file-id]]\n   {:db (assoc-in db [:upload-files :deleting file-id] true)\n    :http-xhrio {:method :delete\n                 :uri (str \"/api/upload-files/files/\" file-id)\n                 :format (ajax/json-request-format)\n                 :response-format (ajax/json-response-format {:keywords? true})\n                 :on-success [:upload-files/file-deleted file-id]\n                 :on-failure [:upload-files/delete-failed file-id]}}))\n\n(rf/reg-event-fx\n :upload-files/file-deleted\n (fn [{:keys [db]} [_ file-id]]\n   {:db (update-in db [:upload-files :deleting] dissoc file-id)\n    :dispatch [:upload-files/load-files]}))\n\n(rf/reg-event-db\n :upload-files/delete-failed\n (fn [db [_ file-id error]]\n   (-> db\n       (update-in [:upload-files :deleting] dissoc file-id)\n       (assoc-in [:upload-files :error] \"Failed to delete file\"))))\n\n;; Create text file event\n(rf/reg-event-fx\n :upload-files/create-text-file\n (fn [{:keys [db]} [_ {:keys [title content]}]]\n   {:db (assoc-in db [:upload-files :uploading?] true)\n    :http-xhrio {:method :post\n                 :uri \"/api/upload-files/create-text\"\n                 :params {:title title :content content}\n                 :format (ajax/json-request-format)\n                 :response-format (ajax/json-response-format {:keywords? true})\n                 :on-success [:upload-files/text-file-created]\n                 :on-failure [:upload-files/text-file-failed]}}))\n\n(rf/reg-event-fx\n :upload-files/text-file-created\n (fn [{:keys [db]} [_ file-data]]\n   {:db (-> db\n            (assoc-in [:upload-files :uploading?] false)\n            (assoc-in [:upload-files :show-text-creator?] false)\n            (assoc-in [:upload-files :selected-file] file-data))\n    :dispatch [:upload-files/load-files]}))\n\n(rf/reg-event-db\n :upload-files/text-file-failed\n (fn [db [_ error]]\n   (-> db\n       (assoc-in [:upload-files :uploading?] false)\n       (assoc-in [:upload-files :error] \"Failed to create text file\"))))\n\n;; Text creator form events\n(rf/reg-event-db\n :upload-files/show-text-creator\n (fn [db [_]]\n   (assoc-in db [:upload-files :show-text-creator?] true)))\n\n(rf/reg-event-db\n :upload-files/hide-text-creator\n (fn [db [_]]\n   (assoc-in db [:upload-files :show-text-creator?] false)))\n\n;; Transcripts Events\n(rf/reg-event-fx\n :transcripts/load-available-dates\n (fn [{:keys [db]} _]\n   {:db (assoc-in db [:transcripts :loading-dates?] true)\n    :http-xhrio {:method :get\n                 :uri \"/api/transcripts/dates\"\n                 :response-format (ajax/json-response-format {:keywords? true})\n                 :on-success [:transcripts/dates-loaded]\n                 :on-failure [:transcripts/dates-load-failed]}}))\n\n(rf/reg-event-db\n :transcripts/dates-loaded\n (fn [db [_ dates]]\n   (-> db\n       (assoc-in [:transcripts :loading-dates?] false)\n       (assoc-in [:transcripts :available-dates] dates))))\n\n(rf/reg-event-db\n :transcripts/dates-load-failed\n (fn [db [_ error]]\n   (-> db\n       (assoc-in [:transcripts :loading-dates?] false)\n       (assoc-in [:transcripts :error] \"Failed to load transcript dates\"))))\n\n(rf/reg-event-fx\n :transcripts/select-date\n (fn [{:keys [db]} [_ date]]\n   {:db (-> db\n            (assoc-in [:transcripts :selected-date] date)\n            (assoc-in [:transcripts :loading-transcript?] true))\n    :http-xhrio {:method :get\n                 :uri (str \"/api/transcripts/date/\" date)\n                 :response-format (ajax/json-response-format {:keywords? true})\n                 :on-success [:transcripts/transcript-loaded]\n                 :on-failure [:transcripts/transcript-load-failed]}}))\n\n(rf/reg-event-db\n :transcripts/transcript-loaded\n (fn [db [_ transcript-data]]\n   (-> db\n       (assoc-in [:transcripts :loading-transcript?] false)\n       (assoc-in [:transcripts :transcript-data] transcript-data))))\n\n(rf/reg-event-db\n :transcripts/transcript-load-failed\n (fn [db [_ error]]\n   (-> db\n       (assoc-in [:transcripts :loading-transcript?] false)\n       (assoc-in [:transcripts :error] \"Failed to load transcript data\"))))"]}