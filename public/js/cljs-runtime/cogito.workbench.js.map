{"version":3,"sources":["cogito/workbench.cljs"],"mappings":"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","names":["cogito.workbench/prompt-input","current-prompt","re_frame.core.subscribe","loading?","cljs.core/deref","p1__11602#","p1__11603#","re-frame.core/dispatch","cljs.core._EQ_","cljs.core/not","or__5002__auto__","cljs.core/empty?","cogito.workbench/turn-display","turn","cogito.response-renderer/render-response","cljs.core.assoc","cogito.workbench/tab-nav","user","available-clients","and__5000__auto__","cogito.tab-buttons/tab-buttons-section","cogito.client-selector/client-selector","cogito.logout-button/logout-button","cogito.workbench/conversation-tab","turns","active-meeting","iter__5480__auto__","s__11607","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5478__auto__","size__5479__auto__","cljs.core/count","b__11609","cljs.core/chunk-buffer","i__11608","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__11606","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","cogito.workbench/upload-files-tab","uploaded-files","cogito.upload-files-left-pane/upload-files-left-pane","cogito.upload-files-right-pane/upload-files-right-pane","cogito.workbench/panel","active-tab","G__11623","cljs.core/Keyword","cogito.meetings/meetings-page","cogito.bot-creation/bot-creation-tab","cogito.semantic-map-simple/semantic-map-tab","cogito.daily-summary/daily-summary-tab","cogito.monthly-summary/monthly-summary-tab","cogito.transcripts-tab/transcripts-tab","cogito.invitations/invitations-panel","cljs.core/chunk-first"],"sourcesContent":["(ns cogito.workbench\n  (:require [reagent.core :as r]\n            [re-frame.core :as rf]\n            [cogito.response-renderer :as renderer]\n            [cogito.story-arc :as story-arc]\n            [cogito.bot-creation :as bot-creation]\n            [cogito.meetings :as meetings]\n            [cogito.semantic-map-simple :as semantic-map]\n            [cogito.daily-summary :as daily-summary]\n            [cogito.monthly-summary :as monthly-summary]\n            [cogito.upload-files-left-pane :as upload-left]\n            [cogito.upload-files-right-pane :as upload-right]\n            [cogito.transcripts-tab :as transcripts]\n            [cogito.invitations :as invitations]\n            [cogito.tab-buttons :as tab-buttons]\n            [cogito.client-selector :as client-selector]\n            [cogito.logout-button :as logout-button]))\n\n(defn prompt-input []\n  (let [current-prompt (rf/subscribe [:current-prompt])\n        loading? (rf/subscribe [:loading?])]\n    (fn []\n      [:div.prompt-input\n       [:textarea\n        {:value @current-prompt\n         :on-change #(rf/dispatch [:set-current-prompt (-> % .-target .-value)])\n         :on-key-down #(when (and (= (.-key %) \"Enter\") \n                                 (not (.-shiftKey %))\n                                 (not @loading?))\n                         (.preventDefault %)\n                         (rf/dispatch [:submit-prompt @current-prompt]))\n         :placeholder \"Enter your prompt...\"\n         :disabled @loading?}]\n       [:button\n        {:on-click #(rf/dispatch [:submit-prompt @current-prompt])\n         :disabled (or @loading? (empty? @current-prompt))}\n        (if @loading? \"Processing...\" \"Send\")]])))\n\n(defn turn-display [turn]\n  [:div.turn\n   [:div.turn-prompt (:prompt turn)]\n   [:div.turn-response\n    ;; This is where the magic happens - dynamic rendering based on response type\n    ;; Pass the turn ID for response-set state management\n    [renderer/render-response (assoc (:response turn) :turn-id (:id turn))]]])\n\n\n(defn tab-nav []\n  (let [user (rf/subscribe [:user])\n        available-clients (rf/subscribe [:available-clients])]\n    \n    ;; Fetch available clients on component mount if we don't have them\n    (when (and @user (empty? @available-clients))\n      (rf/dispatch [:fetch-available-clients]))\n    \n    (fn []\n      [:div.tab-nav.flex.border-b.border-gray-200.mb-4.justify-between\n       [tab-buttons/tab-buttons-section]\n       [:div.flex.items-center.space-x-4\n        [client-selector/client-selector]\n        [logout-button/logout-button]]])))\n\n(defn conversation-tab []\n  (let [turns (rf/subscribe [:turns])\n        active-meeting (rf/subscribe [:active-meeting])]\n    (fn []\n      [:div.conversation-tab\n       (when @active-meeting\n         [:div.bg-blue-50.border-b.border-blue-200.px-4.py-3.mb-4\n          [:div.flex.justify-between.items-center\n           [:div\n            [:h2.text-lg.font-semibold.text-blue-900 \n             (str \"Meeting: \" (or (:name @active-meeting) (:block_name @active-meeting) \"Unnamed Meeting\"))]\n            [:p.text-sm.text-blue-700 \n             (str \"ID: \" (or (:meeting_id @active-meeting) (:block_id @active-meeting)))]]\n           [:button.px-3.py-1.text-sm.bg-blue-600.text-white.rounded.hover:bg-blue-700\n            {:on-click #(rf/dispatch [:leave-meeting])}\n            \"Leave Meeting\"]]])\n       [:div.conversation-history\n        (for [turn @turns]\n          ^{:key (:id turn)}\n          [turn-display turn])]\n       [prompt-input]])))\n\n(defn upload-files-tab []\n  (let [uploaded-files (rf/subscribe [:upload-files/files])]\n    ;; Load files on mount\n    (when (empty? @uploaded-files)\n      (rf/dispatch [:upload-files/load-files]))\n    (fn []\n      [:table.upload-files-tab.h-full.w-full\n       [:tr\n        [:td {:style {:width \"33%\" :vertical-align \"top\"} :class \"border-r border-gray-200 p-4\"}\n         [upload-left/upload-files-left-pane]]\n        [:td {:style {:width \"67%\" :vertical-align \"top\"} :class \"p-4\"}\n         [upload-right/upload-files-right-pane]]]])))\n\n(defn panel []\n  (let [active-tab (rf/subscribe [:workbench/active-tab])]\n    (fn []\n      [:div.workbench-panel\n       [tab-nav]\n       (case @active-tab\n         :conversation [conversation-tab]\n         :meetings [meetings/meetings-page]\n         :bot-creation [bot-creation/bot-creation-tab]\n         :map [semantic-map/semantic-map-tab]\n         :upload-files [upload-files-tab]\n         :daily-summary [daily-summary/daily-summary-tab]\n         :monthly-summary [monthly-summary/monthly-summary-tab]\n         :transcripts [transcripts/transcripts-tab]\n         :invitations [invitations/invitations-panel]\n         [conversation-tab])])))"]}