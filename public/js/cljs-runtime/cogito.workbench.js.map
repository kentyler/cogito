{"version":3,"sources":["cogito/workbench.cljs"],"mappings":"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","names":["cogito.workbench/prompt-input","current-prompt","re_frame.core.subscribe","loading?","cljs.core/deref","p1__6716#","p1__6717#","re-frame.core/dispatch","cljs.core._EQ_","cljs.core/not","or__5002__auto__","cljs.core/empty?","cogito.workbench/turn-display","turn","cogito.response-renderer/render-response","cljs.core.assoc","cogito.workbench/tab-nav","active-tab","user","logging-out?","cogito.workbench/conversation-tab","turns","iter__5480__auto__","s__6719","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5478__auto__","size__5479__auto__","cljs.core/count","b__6721","cljs.core/chunk-buffer","i__6720","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__6718","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","cogito.workbench/analysis-tab","cogito.workbench/panel","G__6722","cljs.core/Keyword","cogito.story-arc/mount-component","cogito.meetings/meetings-page","cogito.bot-creation/bot-creation-tab","cogito.semantic-map-simple/semantic-map-tab","cljs.core/chunk-first"],"sourcesContent":["(ns cogito.workbench\n  (:require [reagent.core :as r]\n            [re-frame.core :as rf]\n            [cogito.response-renderer :as renderer]\n            [cogito.story-arc :as story-arc]\n            [cogito.bot-creation :as bot-creation]\n            [cogito.meetings :as meetings]\n            [cogito.semantic-map-simple :as semantic-map]))\n\n(defn prompt-input []\n  (let [current-prompt (rf/subscribe [:current-prompt])\n        loading? (rf/subscribe [:loading?])]\n    (fn []\n      [:div.prompt-input\n       [:textarea\n        {:value @current-prompt\n         :on-change #(rf/dispatch [:set-current-prompt (-> % .-target .-value)])\n         :on-key-down #(when (and (= (.-key %) \"Enter\") \n                                 (not (.-shiftKey %))\n                                 (not @loading?))\n                         (.preventDefault %)\n                         (rf/dispatch [:submit-prompt @current-prompt]))\n         :placeholder \"Enter your prompt...\"\n         :disabled @loading?}]\n       [:button\n        {:on-click #(rf/dispatch [:submit-prompt @current-prompt])\n         :disabled (or @loading? (empty? @current-prompt))}\n        (if @loading? \"Processing...\" \"Send\")]])))\n\n(defn turn-display [turn]\n  [:div.turn\n   [:div.turn-prompt (:prompt turn)]\n   [:div.turn-response\n    ;; This is where the magic happens - dynamic rendering based on response type\n    ;; Pass the turn ID for response-set state management\n    [renderer/render-response (assoc (:response turn) :turn-id (:id turn))]]])\n\n(defn tab-nav []\n  (let [active-tab (rf/subscribe [:workbench/active-tab])\n        user (rf/subscribe [:user])\n        logging-out? (rf/subscribe [:logging-out?])]\n    (fn []\n      [:div.tab-nav.flex.border-b.border-gray-200.mb-4.justify-between\n       [:div.flex\n        [:button.tab-button.px-4.py-2.border-b-2\n         {:class (if (= @active-tab :conversation) \"border-blue-500 text-blue-600\" \"border-transparent text-gray-500 hover:text-gray-700\")\n          :on-click #(rf/dispatch [:workbench/set-active-tab :conversation])}\n         \"Conversation\"]\n        [:button.tab-button.px-4.py-2.border-b-2\n         {:class (if (= @active-tab :story-arc) \"border-blue-500 text-blue-600\" \"border-transparent text-gray-500 hover:text-gray-700\")\n          :on-click #(rf/dispatch [:workbench/set-active-tab :story-arc])}\n         \"Story Arc\"]\n        [:button.tab-button.px-4.py-2.border-b-2\n         {:class (if (= @active-tab :analysis) \"border-blue-500 text-blue-600\" \"border-transparent text-gray-500 hover:text-gray-700\")\n          :on-click #(rf/dispatch [:workbench/set-active-tab :analysis])}\n         \"Analysis\"]\n        [:button.tab-button.px-4.py-2.border-b-2\n         {:class (if (= @active-tab :meetings) \"border-blue-500 text-blue-600\" \"border-transparent text-gray-500 hover:text-gray-700\")\n          :on-click #(rf/dispatch [:workbench/set-active-tab :meetings])}\n         \"Meetings\"]\n        [:button.tab-button.px-4.py-2.border-b-2\n         {:class (if (= @active-tab :bot-creation) \"border-blue-500 text-blue-600\" \"border-transparent text-gray-500 hover:text-gray-700\")\n          :on-click #(rf/dispatch [:workbench/set-active-tab :bot-creation])}\n         \"Create Bot\"]\n        [:button.tab-button.px-4.py-2.border-b-2\n         {:class (if (= @active-tab :map) \"border-blue-500 text-blue-600\" \"border-transparent text-gray-500 hover:text-gray-700\")\n          :on-click #(rf/dispatch [:workbench/set-active-tab :map])}\n         \"Map\"]]\n       [:div.flex.items-center.space-x-4\n        [:span.text-sm.text-gray-600 \n         (str \"Logged in as \" (:email @user))]\n        [:button.px-3.py-1.text-sm.bg-red-500.text-white.rounded.hover:bg-red-600.disabled:opacity-50\n         {:on-click #(rf/dispatch [:logout])\n          :disabled @logging-out?}\n         (if @logging-out? \"Logging out...\" \"Logout\")]]])))\n\n(defn conversation-tab []\n  (let [turns (rf/subscribe [:turns])]\n    (fn []\n      [:div.conversation-tab\n       [:div.conversation-history\n        (for [turn @turns]\n          ^{:key (:id turn)}\n          [turn-display turn])]\n       [prompt-input]])))\n\n(defn analysis-tab []\n  [:div.analysis-tab.p-4\n   [:h2.text-xl.font-semibold.mb-4 \"Similarity Analysis\"]\n   [:p.text-gray-600 \"Coming soon: Real-time similarity analysis, turn comparisons, and conversation insights.\"]])\n\n(defn panel []\n  (let [active-tab (rf/subscribe [:workbench/active-tab])]\n    (fn []\n      [:div.workbench-panel\n       [tab-nav]\n       (case @active-tab\n         :conversation [conversation-tab]\n         :story-arc [story-arc/mount-component]\n         :analysis [analysis-tab]\n         :meetings [meetings/meetings-page]\n         :bot-creation [bot-creation/bot-creation-tab]\n         :map [semantic-map/semantic-map-tab]\n         [conversation-tab])])))"]}