{"version":3,"sources":["cogito/login.cljs"],"mappings":";AAIA,0BAAA,1BAAMA;AAAN,AACE,IAAMC,QAAM,gDAAA,hDAACC;IACPC,WAAS,gDAAA,hDAACD;IACVE,QAAM,gDAAA,hDAACF;IACPG,iBAAS,gDAAA,hDAACH;AAHhB,AAIE;AAAA,AAAA,0FAAA,0EAAA,mFAAA,iDAAA,uRAAA,mFAAA,sDAAA,2CAAA,paAGG,kBAAA,AAAAI,wBAAA,AAAA,mFAAA,8EAAA,AAAAA,+BAAA,xMAAOF,yLACgBA,wQAEV,WAAKK;AAAL,AACE,AAAiBA;;AACjB,qCAAA,rCAACC,sBAAOL;;AACR,4BAAA,5BAACK,sBAAON;;OACJ,MAAA,NAACO,mBACS,qBAAA,2CAAA,uDAAA,OAAA,2DAAA,2CAAA,eAAA,2BAAA,mEAAA,UAAA,3VAACC,iZAGe,AAACC,eACA,qBAAA,2CAAA,uDAAA,AAAAP,uBAAA,4DAAA,AAAAA,1MAACM,uIAAiBX,mFACEE,7oBAC/C,grBAAO,WAAKW,3rBAIZ,PAGA;AAPO,AACE,oBAAI,AAAMA;AACR,OAAOA;;AACP,MAAO,KAAAC,MAAA;;SACX,WAAKC;AAAL,AACE,qCAAA,rCAACN,sBAAOL;;AACR,8BAAA,mFAAA,1GAACY,iLAA4B,iHAAA,2EAAA,5LAACC,0DAAQF;UACvC,WAAKG;AAAL,AACE,qCAAA,rCAACT,sBAAOL;;AACR,mCAAA,5BAACK,sBAAON;;WA1BxC,mFAAA,0EAAA,mFAAA,uDAAA,iBAAA,mFAAA,sDAAA,2CAAA,qDAAA,QAAA,sDAAA,AAAAE,uBAAA,+DAAA,WAAAC,jFA8BsBN;AA9BtB,AA+B0B,OAACS,sBAAOT,MAAM,AAAA,AAAAM;GA/BxC,6DAAA,KAAA,8DAAA,AAAAD,wDAAA,mFAAA,0EAAA,mFAAA,uDAAA,oBAAA,mFAAA,sDAAA,2CAAA,qDAAA,WAAA,sDAAA,AAAAA,0BAAA,+DAAA,WAAAE,jvBAiCyBH,6pBAIHF;AArCtB,AAsC0B,OAACO,sBAAOP,SAAS,AAAA,AAAAK;GAtC3C,6DAAA,KAAA,8DAAA,AAAAF,wDAAA,mFAAA,yDAAA,2CAAA,qDAAA,SAAA,8DAAA,AAAAA,3VAwCyBD,2WAEAA,wBACpB,kBAAA,AAAAC,iCAAA,gBAAA,jCAAKD","names":["cogito.login/login-form","email","reagent.core.atom","password","error","loading?","cljs.core/deref","p1__6700#","p1__6701#","e","cljs.core/reset!","js/fetch","cljs.core/clj->js","js/JSON.stringify","resp","js/Error","data","re-frame.core/dispatch","cljs.core.js__GT_clj","err"],"sourcesContent":["(ns cogito.login\n  (:require [reagent.core :as r]\n            [re-frame.core :as rf]))\n\n(defn login-form []\n  (let [email (r/atom \"\")\n        password (r/atom \"\")\n        error (r/atom nil)\n        loading? (r/atom false)]\n    (fn []\n      [:div.login-form\n       [:h2 \"Login to Conversational REPL\"]\n       (when @error\n         [:div.error-message @error])\n       [:form\n        {:on-submit (fn [e]\n                      (.preventDefault e)\n                      (reset! loading? true)\n                      (reset! error nil)\n                      (-> (js/fetch \"/api/login\"\n                                    (clj->js {:method \"POST\"\n                                              :headers {\"Content-Type\" \"application/json\"}\n                                              :credentials \"include\"\n                                              :body (js/JSON.stringify\n                                                     (clj->js {:email @email\n                                                              :password @password}))}))\n                          (.then (fn [resp]\n                                   (if (.-ok resp)\n                                     (.json resp)\n                                     (throw (js/Error. \"Login failed\")))))\n                          (.then (fn [data]\n                                   (reset! loading? false)\n                                   (rf/dispatch [:login-success (js->clj data :keywordize-keys true)])))\n                          (.catch (fn [err]\n                                    (reset! loading? false)\n                                    (reset! error \"Invalid credentials\")))))}\n        [:div.form-group\n         [:label \"Email:\"]\n         [:input {:type \"email\"\n                  :value @email\n                  :on-change #(reset! email (-> % .-target .-value))\n                  :required true\n                  :disabled @loading?}]]\n        [:div.form-group\n         [:label \"Password:\"]\n         [:input {:type \"password\"\n                  :value @password\n                  :on-change #(reset! password (-> % .-target .-value))\n                  :required true\n                  :disabled @loading?}]]\n        [:button {:type \"submit\"\n                  :disabled @loading?}\n         (if @loading? \"Logging in...\" \"Login\")]]])))"]}