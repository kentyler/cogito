{"version":3,"sources":["cogito/client_selector.cljs"],"mappings":";AAGA,kDAAA,lDAAMA;AAAN,AAAA,0FAAA,2GAAA,mFAAA,gGAAA,+BAAA,mFAAA;;AAKA,yCAAA,zCAAMG,0FAAiBC,KAAKC,kBAAkBC;AAA9C,AAAA,0FAAA,oRAAA,2CAAA,kNAAA,+DAAA,WAAAL,tOAEW,4CAAK,AAAA,wFAAA,AAAAC,gBAAUE;AAF1B,AAGgB,IAAMG,uBAAqB,AAAA,AAAAN;IACrBO,kBAAgB,AAACC,gBAAM,AAACC,+CAAO,WAAKC;AAAL,AAAQ,OAACC,6CAAE,AAAA,iGAAcD,GAAGJ;GAApC,AAAAL,gBAA4DG;AADzF,AAEE,oBAAMG;AAAN,AACE,8BAAA,mFAAA,1GAACK,kLAA4B,AAAA,2FAAYL;;AAD3C;;GALlB,8DAAA,AAAAN,gBAOeI,iCACZ,iBAAAQ,qBAAA,+DAAAC;AAAA,AAAA,YAAAC,kBAAA,KAAA;AAAA,AAAA,IAAAD,eAAAA;;AAAA,AAAA,IAAAE,qBAAA,AAAAC,cAAAH;AAAA,AAAA,GAAAE;AAAA,AAAA,IAAAF,eAAAE;AAAA,AAAA,GAAA,AAAAE,6BAAAJ;AAAA,IAAAK,kBAq8EgD,AAAAmB,sBAAAxB;IAr8EhDM,qBAAA,AAAAC,gBAAAF;IAAAG,WAAA,AAAAC,uBAAAH;AAAA,AAAA,GAAA,AAAA,iBAAAI,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAJ;AAAA,aAAA,AAAAK,eAAAN,gBAAAK,xCAAMS;AAAN,AAAA,AAAA,AAAAP,uBAAAJ,SAAA,oBAAA,mFAAA,uDAAA,2CAAA,6eAAA,2CAAA,oDACS,AAAA,2FAAYW,jnBACF,AAAA,iGAAcA,gBAC9B,uJAAA,1GAAK,AAAA,iGAAcA,yDAAY,AAAA,qFAAA,AAAAhC,gBAASE;;AAH3C,eAAA,CAAAqB,WAAA;;;;AAAA;;;;;AAAA,OAAAG,qBAAA,AAAAC,gBAAAN,UAAA,AAAAO,qDAAA,AAAAC,qBAAAhB;;AAAA,OAAAa,qBAAA,AAAAC,gBAAAN,UAAA;;;AAAA,aAAA,AAAAd,gBAAAM,zBAAMmB;AAAN,AAAA,OAAAF,eAAA,oBAAA,mFAAA,uDAAA,2CAAA,6eAAA,2CAAA,gKAAA,AAAAF,qDAAA,AAAAG,eAAAlB,hLACS,AAAA,2FAAYmB,jnBACF,AAAA,iGAAcA,gBAC9B,uJAAA,1GAAK,AAAA,iGAAcA,yDAAY,AAAA,qFAAA,AAAAhC,gBAASE;;;AAH3C;;;;GAAA,KAAA;;AAAA,AAAA,OAAAU,mBAAA,AAAAZ,gBAAcG;;;AAKjB,8CAAA,9CAAM8B,oGAAsB/B,KAAKC,kBAAkBC;AAAnD,AAAA,0FAAA,2GAAA,mFAAA,iGAAA,uBAGG,kBAAA,AAAAJ,0CAAA,2IAAA,rKAAKI,6GACFN,2IACAG,uCAAgBC,KAAKC,kBAAkBC;;AAE7C,+CAAA,/CAAM8B,sGAAuBhC;AAA7B,AAAA,0FAAA,iGAEG,CAAA,gBAAqB,kIAAA,2KAAA,3RAAM,AAAA,wFAAA,AAAAF,gBAAUE,QAAM,6JAAA,hHAAK,AAAA,wFAAA,AAAAF,gBAAUE,wEAAY,AAAA,qFAAA,AAAAF,gBAASE;;AAElF,yCAAA,zCAAMiC;AAAN,AACE,IAAMjC,OAAK,sDAAA,mFAAA,zIAACkC;IACNjC,oBAAkB,sDAAA,mFAAA,zIAACiC;IACnBhC,0BAAkB,sDAAA,mFAAA,zIAACgC;AAFzB,AAGE;AAAA,AACE,GAAI,uDAAA,tDAAG,gBAAA,AAAApC,hBAACoB,gCAAOjB;AAAf,0FACG8B,4CAAqB/B,KAAKC,kBAAkBC;;AAD/C,0FAEG8B,6CAAsBhC","names":["cogito.client-selector/client-switching-spinner","p1__11596#","cljs.core/deref","cogito.client-selector/client-dropdown","user","available-clients","switching-client?","selected-client-name","selected-client","cljs.core/first","cljs.core.filter","c","cljs.core._EQ_","re-frame.core/dispatch","iter__5480__auto__","s__11598","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5478__auto__","size__5479__auto__","cljs.core/count","b__11600","cljs.core/chunk-buffer","i__11599","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__11597","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","client","cogito.client-selector/multi-client-section","cogito.client-selector/single-client-section","cogito.client-selector/client-selector","re_frame.core.subscribe","cljs.core/chunk-first"],"sourcesContent":["(ns cogito.client-selector\n  (:require [re-frame.core :as rf]))\n\n(defn client-switching-spinner []\n  [:div.flex.items-center.space-x-2\n   [:span.text-sm.text-gray-500 \"Switching clients...\"]\n   [:div.animate-spin.rounded-full.h-3.w-3.border-b-2.border-blue-600]])\n\n(defn client-dropdown [user available-clients switching-client?]\n  [:select.text-sm.bg-white.border.border-gray-300.rounded.px-2.py-1.focus:outline-none.focus:ring-2.focus:ring-blue-500\n   {:value (str (:client @user))\n    :on-change #(let [selected-client-name (-> % .-target .-value)\n                      selected-client (first (filter (fn [c] (= (:client_name c) selected-client-name)) @available-clients))]\n                  (when selected-client\n                    (rf/dispatch [:switch-client (:client_id selected-client)])))\n    :disabled @switching-client?}\n   (for [client @available-clients]\n     ^{:key (:client_id client)}\n     [:option {:value (:client_name client)} \n      (str (:client_name client) \":\" (:email @user))])])\n\n(defn multi-client-section [user available-clients switching-client?]\n  [:div.flex.items-center.space-x-2\n   [:span.text-sm.text-gray-600 \"Logged in as\"]\n   (if @switching-client?\n     [client-switching-spinner]\n     [client-dropdown user available-clients switching-client?])])\n\n(defn single-client-section [user]\n  [:span.text-sm.text-gray-600 \n   (str \"Logged in as \" (when (:client @user) (str (:client @user) \":\")) (:email @user))])\n\n(defn client-selector []\n  (let [user (rf/subscribe [:user])\n        available-clients (rf/subscribe [:available-clients])\n        switching-client? (rf/subscribe [:switching-client?])]\n    (fn []\n      (if (> (count @available-clients) 1)\n        [multi-client-section user available-clients switching-client?]\n        [single-client-section user]))))"]}