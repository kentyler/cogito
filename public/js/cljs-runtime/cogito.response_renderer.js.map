{"version":3,"sources":["cogito/response_renderer.cljs"],"mappings":";AAiBA,GAAA,QAAAA,mCAAAC,qDAAAC;AAAA;AAAA,AAAA,4CAAA,iBAAAC,6BAAA,AAAAC,6CAAA,vIAAUS;IAAVR,6BAAA,AAAAD,6CAAA;IAAAE,6BAAA,AAAAF,6CAAA;IAAAG,iCAAA,AAAAH,6CAAA;IAAAI,0BAAA,AAAAC,4CAAA,mCAAA,gEAAA,iBAAAC,eAAA;AAAA,AAAA,QAAAA,6CAAAA,+CAAAA;;AAAA,AAAA,YAAAC,kBAAA,AAAAC,+CAAA,2BAAA,oBAAA,wEAAA,4DAAAJ,wBAAAL,2BAAAE,2BAAAC,2BAAAC;;;AAGA,AAAAM,sFAAA,sDAAA,WAAmCC;AAAnC,AAAA,0FAAA,gFACsB,AAAA,uFAAUA;;AAGhC,AAAAD,sFAAA,oDAAA,WAAmCC;AAAnC,AAAA,0FAAA,4EAEG,iBAAAC,qBAAA,+CAAAC;AAAA,AAAA,YAAAC,kBAAA,KAAA;AAAA,AAAA,IAAAD,eAAAA;;AAAA,AAAA,IAAAE,qBAAA,AAAAC,cAAAH;AAAA,AAAA,GAAAE;AAAA,AAAA,IAAAF,eAAAE;AAAA,AAAA,GAAA,AAAAE,6BAAAJ;AAAA,IAAAK,kBA27EgD,AAAAoE,sBAAAzE;IA37EhDM,qBAAA,AAAAC,gBAAAF;IAAAG,WAAA,AAAAC,uBAAAH;AAAA,AAAA,GAAA,AAAA,iBAAAI,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAJ;AAAA,IAAAK,aAAA,AAAAC,eAAAP,gBAAAK;UAAA,AAAAG,4CAAAF,WAAA,IAAA,jEAAOY;WAAP,AAAAV,4CAAAF,WAAA,IAAA,lEAAWa;AAAX,AAAA,AAAA,AAAAV,uBAAAN,SAAA,oBAAA,mFAAA,gDAAA,2CAAA,6DAGc,iBAAAN,yBAAmB,wDAAA,mFAAA,oEAAA,/MAAC0B,+CAAO9B;AAA3B,AAAA,oBAAAI;AAAA,AAAA,cAAAA,VAAWyB;AAAX,AAAA;;AAAA,AACG,QAACA,wCAAAA,8CAAAA,RAAQH,0BAAAA;;;;AADZ;;0BAHd,2CAAA,oDACSD,5GAINC;;AALH,eAAA,CAAAd,WAAA;;;;AAAA;;;;;AAAA,OAAAK,qBAAA,AAAAC,gBAAAR,UAAA,AAAAS,qCAAA,AAAAC,qBAAAlB;;AAAA,OAAAe,qBAAA,AAAAC,gBAAAR,UAAA;;;AAAA,IAAAW,aAAA,AAAAC,gBAAApB;UAAA,AAAAa,4CAAAM,WAAA,IAAA,jEAAOI;WAAP,AAAAV,4CAAAM,WAAA,IAAA,lEAAWK;AAAX,AAAA,OAAAH,eAAA,oBAAA,mFAAA,gDAAA,2CAAA,6DAGc,iBAAAnB,yBAAmB,wDAAA,mFAAA,oEAAA,/MAAC0B,+CAAO9B;AAA3B,AAAA,oBAAAI;AAAA,AAAA,cAAAA,VAAWyB;AAAX,AAAA;;AAAA,AACG,QAACA,wCAAAA,8CAAAA,RAAQH,0BAAAA;;;;AADZ;;0BAHd,2CAAA,iEAAA,AAAAP,qCAAA,AAAAK,eAAAtB,jEACSuB,5GAINC;;;AALH;;;;GAAA,KAAA;;AAAA,AAAA,OAAAzB,mBAAiB,AAAC0B,oDAAYC,iBAAO,AAAA,qFAAQ5B;;;AAQhD,AAAAD,sFAAA,mEAAA,WAA0CC;AAA1C,AAAA,0FAAA,4FAAA,mFAAA,uJAAA,mFAAA,uDAAA,mFAAA,uDAAA,mFAAA,7cAEQ,AAAA,oFAAQA,2aAIV,iBAAAC,qBAAA,+CAAA8B;AAAA,AAAA,YAAA5B,kBAAA,KAAA;AAAA,AAAA,IAAA4B,eAAAA;;AAAA,AAAA,IAAA3B,qBAAA,AAAAC,cAAA0B;AAAA,AAAA,GAAA3B;AAAA,AAAA,IAAA2B,eAAA3B;AAAA,AAAA,GAAA,AAAAE,6BAAAyB;AAAA,IAAAxB,kBA66E6C,AAAAoE,sBAAA5C;IA76E7CvB,qBAAA,AAAAC,gBAAAF;IAAAyB,WAAA,AAAArB,uBAAAH;AAAA,AAAA,GAAA,AAAA,iBAAAyB,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAzB;AAAA,aAAA,AAAAM,eAAAP,gBAAA0B,xCAAME;AAAN,AAAA,AAAA,AAAAnB,uBAAAgB,SAAA,oBAAA,mFAAA,gEAAA,2CAAA,oDACSG,9GACFA;;AAFP,eAAA,CAAAF,WAAA;;;;AAAA;;;;;AAAA,OAAAhB,qBAAA,AAAAC,gBAAAc,UAAA,AAAAE,qCAAA,AAAAd,qBAAAW;;AAAA,OAAAd,qBAAA,AAAAC,gBAAAc,UAAA;;;AAAA,aAAA,AAAAV,gBAAAS,zBAAMI;AAAN,AAAA,OAAAZ,eAAA,oBAAA,mFAAA,gEAAA,2CAAA,oEAAA,AAAAW,qCAAA,AAAAV,eAAAO,pEACSI,9GACFA;;;AAFP;;;;GAAA,KAAA;;AAAA,AAAA,OAAAlC,mBAAa,AAAA,yFAAUD;qBAN7B,mFAAA,sDAUK,iBAAAC,qBAAA,+CAAAmC;AAAA,AAAA,YAAAjC,kBAAA,KAAA;AAAA,AAAA,IAAAiC,eAAAA;;AAAA,AAAA,IAAAhC,qBAAA,AAAAC,cAAA+B;AAAA,AAAA,GAAAhC;AAAA,AAAA,IAAAgC,eAAAhC;AAAA,AAAA,GAAA,AAAAE,6BAAA8B;AAAA,IAAA7B,kBAy6E8C,AAAAoE,sBAAAvC;IAz6E9C5B,qBAAA,AAAAC,gBAAAF;IAAA8B,WAAA,AAAA1B,uBAAAH;AAAA,AAAA,GAAA,AAAA,iBAAA8B,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAA9B;AAAA,IAAA+B,aAAA,AAAAzB,eAAAP,gBAAA+B;cAAA,AAAAvB,4CAAAwB,WAAA,IAAA,rEAAOG;UAAP,AAAA3B,4CAAAwB,WAAA,IAAA,jEAAeI;AAAf,AAAA,AAAA,AAAA3B,uBAAAqB,SAAA,oBAAA,mFAAA,kDAGG,iBAAApC,qBAAA;oEAAA2C;AAAA,AAAA,YAAAzC,kBAAA,KAAA;;AAAA,AAAA,IAAAyC,eAAAA;;AAAA,AAAA,IAAAxC,yBAAA,AAAAC,cAAAuC;AAAA,AAAA,GAAAxC;AAAA,AAAA,IAAAwC,eAAAxC;AAAA,AAAA,GAAA,AAAAE,6BAAAsC;AAAA,IAAArC,sBAs6E2C,AAAAoE,sBAAA/B;IAt6E3CpC,yBAAA,AAAAC,gBAAAF;IAAAsC,WAAA,AAAAlC,uBAAAH;AAAA,AAAA,GAAA,AAAA,iBAAAsC,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAtC;AAAA,IAAAuC,aAAA,AAAAjC,eAAAP,oBAAAuC;cAAA,AAAA/B,4CAAAgC,WAAA,IAAA,rEAAOS;WAAP,AAAAzC,4CAAAgC,WAAA,IAAA,lEAAeU;AAAf,AAAA,AAAA,AAAAzC,uBAAA6B,SAAA,oBAAA,mFAAA,8DAAA,2CAAA,oDACSW,5GACFC;;AAFP,eAAA,CAAAX,WAAA;;;;AAAA;;;;;AAAA,OAAA7B,qBAAA,AAAAC,gBAAA2B,UAAA,AAAAG,mDAAA,AAAA5B,qBAAAwB;;AAAA,OAAA3B,qBAAA,AAAAC,gBAAA2B,UAAA;;;AAAA,IAAAI,aAAA,AAAA3B,gBAAAsB;cAAA,AAAA7B,4CAAAkC,WAAA,IAAA,rEAAOO;WAAP,AAAAzC,4CAAAkC,WAAA,IAAA,lEAAeQ;AAAf,AAAA,OAAAlC,eAAA,oBAAA,mFAAA,8DAAA,2CAAA,qEAAA,AAAAyB,mDAAA,AAAAxB,eAAAoB,nFACSY,5GACFC;;;AAFP;;;;;CAAA,KAAA;;;AAAA,AAAA,OAAAxD,mBAAqB,AAAC0B,oDAAYC,iBAAOe;aAH5C,2CAAA,oDACSD;;AADT,eAAA,CAAAJ,WAAA;;;;AAAA;;;;;AAAA,OAAArB,qBAAA,AAAAC,gBAAAmB,UAAA,AAAAG,qCAAA,AAAApB,qBAAAgB;;AAAA,OAAAnB,qBAAA,AAAAC,gBAAAmB,UAAA;;;AAAA,IAAAI,aAAA,AAAAnB,gBAAAc;cAAA,AAAArB,4CAAA0B,WAAA,IAAA,rEAAOC;UAAP,AAAA3B,4CAAA0B,WAAA,IAAA,jEAAeE;AAAf,AAAA,OAAApB,eAAA,oBAAA,mFAAA,kDAGG,iBAAAtB,qBAAA;oEAAAiD;AAAA,AAAA,YAAA/C,kBAAA,KAAA;AAAA,AAAA,IAAA+C,eAAAA;;AAAA,AAAA,IAAA9C,yBAAA,AAAAC,cAAA6C;AAAA,AAAA,GAAA9C;AAAA,AAAA,IAAA8C,eAAA9C;AAAA,AAAA,GAAA,AAAAE,6BAAA4C;AAAA,IAAA3C,kBAs6E2C,AAAAoE,sBAAAzB;IAt6E3C1C,qBAAA,AAAAC,gBAAAF;IAAA4C,WAAA,AAAAxC,uBAAAH;AAAA,AAAA,GAAA,AAAA,iBAAA4C,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAA5C;AAAA,IAAA6C,aAAA,AAAAvC,eAAAP,gBAAA6C;cAAA,AAAArC,4CAAAsC,WAAA,IAAA,rEAAOG;WAAP,AAAAzC,4CAAAsC,WAAA,IAAA,lEAAeI;AAAf,AAAA,AAAA,AAAAzC,uBAAAmC,SAAA,oBAAA,mFAAA,8DAAA,2CAAA,oDACSK,5GACFC;;AAFP,eAAA,CAAAL,WAAA;;;;AAAA;;;;;AAAA,OAAAnC,qBAAA,AAAAC,gBAAAiC,UAAA,AAAAG,mDAAA,AAAAlC,qBAAA8B;;AAAA,OAAAjC,qBAAA,AAAAC,gBAAAiC,UAAA;;;AAAA,IAAAI,aAAA,AAAAjC,gBAAA4B;cAAA,AAAAnC,4CAAAwC,WAAA,IAAA,rEAAOC;WAAP,AAAAzC,4CAAAwC,WAAA,IAAA,lEAAeE;AAAf,AAAA,OAAAlC,eAAA,oBAAA,mFAAA,8DAAA,2CAAA,qEAAA,AAAA+B,mDAAA,AAAA9B,eAAA0B,nFACSM,5GACFC;;;AAFP;;;;GAAA,KAAA;;;AAAA,AAAA,OAAAxD,mBAAqB,AAAC0B,oDAAYC,iBAAOe;aAH5C,2CAAA,qEAAA,AAAAH,qCAAA,AAAAhB,eAAAY,rEACSM;;;AADT;;;;GAAA,KAAA;;AAAA,AAAA,OAAAzC,mBAAoB,AAAC0B,oDAAYC,iBAAO,AAAA,mFAAO5B;;;AAQpD,AAAAD,sFAAA,2DAAA,WAAsCC;AAAtC,AAAA,0FAAA,sFAAA,mFAAA,uJAAA,mFAAA,4FAAA,0CAAA,mFAAA,lZAEQ,AAAA,oFAAQA,iXAGN,AAAC0D,wGAAO,AAAA,sFAAQ1D;;AAG1B,AAAAD,sFAAA,uDAAA,WAAoCC;AAApC,AAAA,0FAAA,gFAAA,mFAAA,6EAAA,mFAAA,mDAAA,mFAAA,wDAAA,+GAAA,mFAAA,mDAAA,mFAAA,wDAAA,wIAAA,mFAAA,wEAAA,2CAAA,2EAAA,KAAA,/wBAG2B,AAAA,8EAAKA,uTACA,AAAA,0FAAUA,0WAG5B,iBAAAI,qBAAmB,wDAAA,mFAAA,oEAAA,/MAAC0B,+CAAO9B;AAA3B,AAAA,oBAAAI;AAAA,AAAA,cAAAA,VAAWyB;AAAX,AAAA,kBAAA8B;AAAA,AACG,IAAAC,WAAS,AAAA,AAAAD;AAAT,AAAA,sFAAAC,8BAAAA,5GAAC/B,wCAAAA,kDAAAA;;;AADJ;;aAEV,AAAA,oFAAO7B;;AAGX,AAAAD,sFAAA,sEAAA,WAA2CC;AAA3C,AACE,IAAM6D,eAAa,AAAA,mGAAe7D;IAC5B8D,UAAQ,AAAA,wFAAU9D;IAClB+D,gBAAc,sDAAA,mFAAA,zIAACC,wOAAyCF;IACxDG,kBAAW,WAAKC;AAAL,AACE,8BAAA,mFAAA,1GAACC,qMAAsCL,QAAQI;;IAC5DE,cAAY;AAAA,AAAO,OAACrD,4CAAI8C,aAAa,iBAAAQ,mBAAA,AAAAC,gBAAKP;AAAL,AAAA,oBAAAM;AAAAA;;AAAA;;;;AAL3C,AAME,kBAAKrE;AAAL,AACE,IAAMuE,MAAI,AAACH;IACLI,cAAY,AAAC/D,gBAAMoD;IACnBK,QAAM,iBAAAG,mBAAA,AAAAC,gBAAKP;AAAL,AAAA,oBAAAM;AAAAA;;AAAA;;;AAFZ,AAAA,0FAAA,6EAAA,mFAAA,2FAAA,iJAAA,mFAAA,4FAAA,mFAAA,2EAAA,mFAAA,0EAAA,2CAAA,sHAAA,6DAAA,twBAMKtE,0CAAiBwE,umBAOL,mDAAA,nDAACE,6CAAEP;AAbpB,AAckB,uBAAA,hBAACD;WAdnB,aAAA,mFAAA,0EAAA,2CAAA,sHAAA,6DAAA,rHAmBiB,mDAAA,nDAACQ,6CAAEP;AAnBpB,AAoBkB,OAACD,gBAAW,SAAA,RAAKC;WApBnC,aAAA,mFAAA,0EAAA,2CAAA,sIAAA,6DAAA,rIAyBiB,AAACO,6CAAEP,MAAM,eAAA,dAAKM;AAzB/B,AA0BkB,OAACP,gBAAW,SAAA,RAAKC;WA1BnC,aAAA,mFAAA,0EAAA,2CAAA,sIAAA,6DAAA,rIA+BiB,AAACO,6CAAEP,MAAM,eAAA,dAAKM;AA/B/B,AAgCkB,OAACP,gBAAW,eAAA,dAAKO;WAhCnC,qBAAA,mFAAA,wNAAA,mFAAA,jOAqCK,4DAAA,fAAK,SAAA,RAAKN,iEAAcM,4MAIxB,AAAA,wFAAUD;;;AAGrB,AAAAxE,sFAAA,4DAAA,WAAsCC;AAAtC,AAAA,0FAAA,sFAAA,mFAAA,mDAES,AAAC0D,wGAAO1D;;AAEjB,2CAAA,3CAAM0E,8FAAiB1E;AAAvB,AAEE,GAAI,OAASA;AAAb,0FAAA,gFACsBA;;AADtB,0FAEGD,0CAAiBC","names":["js/cogito","js/cogito.response-renderer","js/cogito.response-renderer.render-component","method-table__5599__auto__","cljs.core.atom","prefer-table__5600__auto__","method-cache__5601__auto__","cached-hierarchy__5602__auto__","hierarchy__5603__auto__","cljs.core.get","fexpr__10683","cljs.core/MultiFn","cljs.core.symbol","cogito.response-renderer/render-component","response","iter__5480__auto__","s__10695","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5478__auto__","size__5479__auto__","cljs.core/count","b__10697","cljs.core/chunk-buffer","i__10696","vec__10725","cljs.core/-nth","cljs.core.nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__10694","cljs.core/chunk-rest","vec__10761","cljs.core/first","cljs.core/cons","cljs.core/rest","idx","item","cljs.core.map_indexed","cljs.core/vector","handler","cljs.core.get_in","s__10830","b__10832","i__10831","iter__10829","header","s__10848","b__10850","i__10849","vec__10874","iter__10847","vec__10949","row-idx","row","s__10882","b__10884","i__10883","vec__10932","iter__10881","vec__10940","s__10955","b__10957","i__10956","vec__10961","iter__10954","vec__10985","col-idx","cell","cljs.core.pr_str","p1__10988#","G__10989","alternatives","turn-id","current-index","re_frame.core.subscribe","set-index!","index","re-frame.core/dispatch","current-alt","or__5002__auto__","cljs.core/deref","alt","total-count","cljs.core._EQ_","cogito.response-renderer/render-response","cljs.core/chunk-first"],"sourcesContent":["(ns cogito.response-renderer\n  (:require [reagent.core :as r]\n            [re-frame.core :as rf]))\n\n;; The response from LLM should be a ClojureScript data structure like:\n;; {:response-type :text\n;;  :content \"Hello world\"}\n;;\n;; or\n;; {:response-type :spreadsheet\n;;  :title \"Team Analysis\"\n;;  :headers [\"Name\" \"Role\" \"Status\"]\n;;  :data [[\"Alice\" \"Lead\" \"Active\"]\n;;         [\"Bob\" \"Dev\" \"Active\"]]\n;;  :interactions {:on-edit update-cell\n;;                 :on-sort sort-by-column}}\n\n(defmulti render-component :response-type)\n\n;; Default text rendering\n(defmethod render-component :text [response]\n  [:div.text-response (:content response)])\n\n;; List rendering\n(defmethod render-component :list [response]\n  [:ul.list-response\n   (for [[idx item] (map-indexed vector (:items response))]\n     ^{:key idx}\n     [:li \n      {:on-click (when-let [handler (get-in response [:interactions :on-click])]\n                   #(handler item))}\n      item])])\n\n;; Spreadsheet/table rendering\n(defmethod render-component :spreadsheet [response]\n  [:div.spreadsheet-response\n   [:h3 (:title response)]\n   [:table\n    [:thead\n     [:tr\n      (for [header (:headers response)]\n        ^{:key header}\n        [:th header])]]\n    [:tbody\n     (for [[row-idx row] (map-indexed vector (:data response))]\n       ^{:key row-idx}\n       [:tr\n        (for [[col-idx cell] (map-indexed vector row)]\n          ^{:key col-idx}\n          [:td cell])])]]])\n\n;; Diagram rendering (simplified for now)\n(defmethod render-component :diagram [response]\n  [:div.diagram-response\n   [:h3 (:title response)]\n   [:div.diagram-placeholder\n    \"Diagram visualization would render here\"\n    [:pre (pr-str (:nodes response))]]])\n\n;; Email draft rendering\n(defmethod render-component :email [response]\n  [:div.email-response\n   [:div.email-header\n    [:div [:strong \"To: \"] (:to response)]\n    [:div [:strong \"Subject: \"] (:subject response)]]\n   [:div.email-body\n    {:contentEditable true\n     :on-blur (when-let [handler (get-in response [:interactions :on-edit])]\n                #(handler (-> % .-target .-innerText)))}\n    (:body response)]])\n\n;; Response set rendering with navigation\n(defmethod render-component :response-set [response]\n  (let [alternatives (:alternatives response)\n        turn-id (:turn-id response) ;; We'll need to pass this from the workbench\n        current-index (rf/subscribe [:current-alternative-index turn-id])\n        set-index! (fn [index] \n                     (rf/dispatch [:set-current-alternative turn-id index]))\n        current-alt (fn [] (nth alternatives (or @current-index 0)))]\n    (fn [response]\n      (let [alt (current-alt)\n            total-count (count alternatives)\n            index (or @current-index 0)]\n        [:div.response-set\n         ;; Current alternative display\n         [:div.alternative-content\n          [render-component alt]]\n         \n         ;; Navigation controls\n         [:div.navigation-controls\n          [:div.nav-buttons\n           ;; First button |<\n           [:button.nav-btn\n            {:disabled (= index 0)\n             :on-click #(set-index! 0)}\n            \"|<\"]\n           \n           ;; Previous button <<\n           [:button.nav-btn\n            {:disabled (= index 0)\n             :on-click #(set-index! (dec index))}\n            \"<<\"]\n           \n           ;; Next button >>\n           [:button.nav-btn\n            {:disabled (= index (dec total-count))\n             :on-click #(set-index! (inc index))}\n            \">>\"]\n           \n           ;; Last button >|\n           [:button.nav-btn\n            {:disabled (= index (dec total-count))\n             :on-click #(set-index! (dec total-count))}\n            \">|\"]]\n          \n          ;; Counter display\n          [:div.nav-counter\n           (str (inc index) \" of \" total-count)]\n          \n          ;; Alternative summary\n          [:div.alternative-summary\n           (:summary alt)]]]))))\n\n;; Default fallback\n(defmethod render-component :default [response]\n  [:div.unknown-response\n   [:pre (pr-str response)]])\n\n(defn render-response [response]\n  ;; Handle both string responses and structured responses\n  (if (string? response)\n    [:div.text-response response]\n    [render-component response]))"]}