{"version":3,"sources":["cogito/response_renderer.cljs"],"mappings":"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","names":["js/cogito","js/cogito.response-renderer","js/cogito.response-renderer.render-component","method-table__5599__auto__","cljs.core.atom","prefer-table__5600__auto__","method-cache__5601__auto__","cached-hierarchy__5602__auto__","hierarchy__5603__auto__","cljs.core.get","fexpr__10532","cljs.core/MultiFn","cljs.core.symbol","cogito.response-renderer/render-component","response","iter__5480__auto__","s__10535","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5478__auto__","size__5479__auto__","cljs.core/count","b__10537","cljs.core/chunk-buffer","i__10536","vec__10540","cljs.core/-nth","cljs.core.nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__10534","cljs.core/chunk-rest","vec__10546","cljs.core/first","cljs.core/cons","cljs.core/rest","idx","paragraph","cljs.core.map_indexed","cljs.core/vector","clojure.string/split-lines","clojure.string/blank?","s__10558","b__10560","i__10559","vec__10563","iter__10557","vec__10570","item","cljs.core.get_in","handler","s__10590","b__10592","i__10591","iter__10589","header","s__10601","b__10603","i__10602","vec__10608","iter__10600","vec__10636","row-idx","row","s__10612","b__10614","i__10613","vec__10620","iter__10611","vec__10623","s__10641","b__10643","i__10642","vec__10669","iter__10640","vec__10677","col-idx","cell","cljs.core.pr_str","p1__10696#","G__10698","alternatives","turn-id","current-index","re_frame.core.subscribe","set-index!","index","re-frame.core/dispatch","current-alt","or__5002__auto__","cljs.core/deref","alt","total-count","cljs.core._EQ_","s__10716","b__10718","i__10717","iter__10715","i","cljs.core.range","content","items","clojure.string.join","data","cljs.core/sequential?","cljs.core.map","cljs.core/str","s__10799","b__10801","i__10800","vec__10814","iter__10798","vec__10822","cogito.response-renderer/render-response","cljs.core/chunk-first"],"sourcesContent":["(ns cogito.response-renderer\n  (:require [reagent.core :as r]\n            [re-frame.core :as rf]\n            [clojure.string :as str]))\n\n;; The response from LLM should be a ClojureScript data structure like:\n;; {:response-type :text\n;;  :content \"Hello world\"}\n;;\n;; or\n;; {:response-type :spreadsheet\n;;  :title \"Team Analysis\"\n;;  :headers [\"Name\" \"Role\" \"Status\"]\n;;  :data [[\"Alice\" \"Lead\" \"Active\"]\n;;         [\"Bob\" \"Dev\" \"Active\"]]\n;;  :interactions {:on-edit update-cell\n;;                 :on-sort sort-by-column}}\n\n(defmulti render-component :response-type)\n\n;; Default text rendering with proper formatting\n(defmethod render-component :text [response]\n  [:div.text-response.space-y-3\n   (for [[idx paragraph] (map-indexed vector (str/split-lines (:content response)))]\n     (when-not (str/blank? paragraph)\n       ^{:key idx}\n       [:p.text-gray-700.leading-relaxed paragraph]))])\n\n;; List rendering\n(defmethod render-component :list [response]\n  [:ul.list-response.space-y-2.pl-5.list-disc\n   (for [[idx item] (map-indexed vector (:items response))]\n     ^{:key idx}\n     [:li.text-gray-700.leading-relaxed\n      {:class (when (get-in response [:interactions :on-click])\n                \"cursor-pointer hover:text-blue-600 transition-colors\")\n       :on-click (when-let [handler (get-in response [:interactions :on-click])]\n                   #(handler item))}\n      item])])\n\n;; Spreadsheet/table rendering\n(defmethod render-component :spreadsheet [response]\n  [:div.spreadsheet-response\n   [:h3 (:title response)]\n   [:table\n    [:thead\n     [:tr\n      (for [header (:headers response)]\n        ^{:key header}\n        [:th header])]]\n    [:tbody\n     (for [[row-idx row] (map-indexed vector (:data response))]\n       ^{:key row-idx}\n       [:tr\n        (for [[col-idx cell] (map-indexed vector row)]\n          ^{:key col-idx}\n          [:td cell])])]]])\n\n;; Diagram rendering (simplified for now)\n(defmethod render-component :diagram [response]\n  [:div.diagram-response\n   [:h3 (:title response)]\n   [:div.diagram-placeholder\n    \"Diagram visualization would render here\"\n    [:pre (pr-str (:nodes response))]]])\n\n;; Email draft rendering\n(defmethod render-component :email [response]\n  [:div.email-response\n   [:div.email-header\n    [:div [:strong \"To: \"] (:to response)]\n    [:div [:strong \"Subject: \"] (:subject response)]]\n   [:div.email-body\n    {:contentEditable true\n     :on-blur (when-let [handler (get-in response [:interactions :on-edit])]\n                #(handler (-> % .-target .-innerText)))}\n    (:body response)]])\n\n;; Response set rendering with navigation\n(defmethod render-component :response-set [response]\n  (let [alternatives (:alternatives response)\n        turn-id (:turn-id response) ;; We'll need to pass this from the workbench\n        current-index (rf/subscribe [:current-alternative-index turn-id])\n        set-index! (fn [index] \n                     (rf/dispatch [:set-current-alternative turn-id index]))\n        current-alt (fn [] (nth alternatives (or @current-index 0)))]\n    (fn [response]\n      (let [alt (current-alt)\n            total-count (count alternatives)\n            index (or @current-index 0)]\n        [:div.response-set.border.border-gray-200.rounded-lg.p-4.space-y-4\n         ;; Header with alternative summary\n         [:div.bg-gray-50.rounded-md.p-3\n          [:h3.text-sm.font-semibold.text-gray-700.mb-1 \n           (str \"Response \" (inc index) \" of \" total-count)]\n          [:p.text-sm.text-gray-600 (:summary alt)]]\n         \n         ;; Current alternative display\n         [:div.alternative-content.pl-4.border-l-4.border-blue-400\n          [render-component alt]]\n         \n         ;; Navigation controls\n         [:div.navigation-controls.flex.items-center.justify-between.pt-3.border-t.border-gray-200\n          [:div.nav-buttons.flex.gap-2\n           ;; First button |<\n           [:button.nav-btn.px-3.py-1.bg-gray-100.hover:bg-gray-200.rounded.disabled:opacity-50.disabled:cursor-not-allowed.transition-colors\n            {:disabled (= index 0)\n             :on-click #(set-index! 0)}\n            \"|<\"]\n           \n           ;; Previous button <<\n           [:button.nav-btn.px-3.py-1.bg-gray-100.hover:bg-gray-200.rounded.disabled:opacity-50.disabled:cursor-not-allowed.transition-colors\n            {:disabled (= index 0)\n             :on-click #(set-index! (dec index))}\n            \"<<\"]\n           \n           ;; Next button >>\n           [:button.nav-btn.px-3.py-1.bg-gray-100.hover:bg-gray-200.rounded.disabled:opacity-50.disabled:cursor-not-allowed.transition-colors\n            {:disabled (= index (dec total-count))\n             :on-click #(set-index! (inc index))}\n            \">>\"]\n           \n           ;; Last button >|\n           [:button.nav-btn.px-3.py-1.bg-gray-100.hover:bg-gray-200.rounded.disabled:opacity-50.disabled:cursor-not-allowed.transition-colors\n            {:disabled (= index (dec total-count))\n             :on-click #(set-index! (dec total-count))}\n            \">|\"]]\n          \n          ;; Alternative pills\n          [:div.flex.gap-1\n           (for [i (range total-count)]\n             ^{:key i}\n             [:button.w-2.h-2.rounded-full.transition-colors\n              {:class (if (= i index) \"bg-blue-500\" \"bg-gray-300 hover:bg-gray-400\")\n               :on-click #(set-index! i)}])]]]))))\n\n;; Default fallback - extract displayable content\n(defmethod render-component :default [response]\n  (let [;; Try to extract meaningful content from various possible keys\n        content (or (:content response)\n                    (:summary response)\n                    (:text response)\n                    (:body response)\n                    (:message response)\n                    ;; If it has :items, render as a list\n                    (when-let [items (:items response)]\n                      (str/join \"\\n\" items))\n                    ;; If it has :data, try to render it meaningfully\n                    (when-let [data (:data response)]\n                      (if (sequential? data)\n                        (str/join \"\\n\" (map str data))\n                        (str data))))]\n    (if content\n      ;; If we found content, render it as plain text\n      [:div.text-response.space-y-3\n       (for [[idx paragraph] (map-indexed vector (str/split-lines (str content)))]\n         (when-not (str/blank? paragraph)\n           ^{:key idx}\n           [:p.text-gray-700.leading-relaxed paragraph]))]\n      ;; Only show raw EDN if we couldn't extract any content\n      [:div.unknown-response.text-gray-500.text-sm\n       [:p.mb-2 \"Unknown response format:\"]\n       [:pre.bg-gray-100.p-2.rounded.text-xs (pr-str response)]])))\n\n(defn render-response [response]\n  ;; Handle both string responses and structured responses\n  (if (string? response)\n    [:div.text-response response]\n    [render-component response]))"]}