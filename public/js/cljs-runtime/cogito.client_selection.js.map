{"version":3,"sources":["cogito/client_selection.cljs"],"mappings":"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","names":["cogito.client-selection/client-selection-form","available-clients","re_frame.core.subscribe","selecting?","error","selected-client","reagent.core.atom","js/console.log","cljs.core/deref","cljs.core/clj->js","e","re-frame.core/dispatch","iter__5480__auto__","s__11416","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5478__auto__","size__5479__auto__","cljs.core/count","b__11418","cljs.core/chunk-buffer","i__11417","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__11415","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","client","cljs.core._EQ_","cljs.core/reset!","or__5002__auto__","cljs.core/chunk-first"],"sourcesContent":["(ns cogito.client-selection\n  (:require [reagent.core :as r]\n            [re-frame.core :as rf]))\n\n(defn client-selection-form []\n  (let [available-clients (rf/subscribe [:available-clients])\n        selecting? (rf/subscribe [:selecting-client?])\n        error (rf/subscribe [:client-selection-error])\n        selected-client (r/atom nil)]\n    (fn []\n      (js/console.log \"Available clients:\" (clj->js @available-clients))\n      [:div.client-selection-form\n       [:h2 \"Select Client Account\"]\n       [:p.text-gray-600.mb-4 \"You have access to multiple client accounts. Please select which one to use:\"]\n       \n       (when @error\n         [:div.error-message.bg-red-100.text-red-700.p-3.rounded.mb-4\n          @error])\n       \n       [:form\n        {:on-submit (fn [e]\n                      (.preventDefault e)\n                      (when @selected-client\n                        (rf/dispatch [:select-client (:client_id @selected-client)])))}\n        \n        [:div.space-y-3.mb-6\n         [:div \"Debug: \" (str @available-clients)]\n         (for [client @available-clients]\n           ^{:key (:client_id client)}\n           [:label.flex.items-center.p-3.border.rounded.cursor-pointer.hover:bg-gray-50\n            {:class (if (= client @selected-client) \"border-blue-500 bg-blue-50\" \"border-gray-300\")}\n            [:input.mr-3\n             {:type \"radio\"\n              :name \"client\"\n              :value (:client_id client)\n              :checked (= client @selected-client)\n              :on-change #(reset! selected-client client)}]\n            [:div\n             [:div.font-medium (:client_name client)]\n             (when (:role client)\n               [:div.text-sm.text-gray-600 (str \"Role: \" (:role client))])]])]\n        \n        [:button.w-full.px-4.py-2.bg-blue-600.text-white.rounded.hover:bg-blue-700.disabled:opacity-50.disabled:cursor-not-allowed\n         {:type \"submit\"\n          :disabled (or @selecting? (nil? @selected-client))}\n         (if @selecting? \"Selecting...\" \"Continue\")]]])))"]}