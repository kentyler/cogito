{"version":3,"sources":["cogito/semantic_map_simple.cljs"],"mappings":"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","names":["re_frame.core.reg_event_db","p__6718","vec__6721","cljs.core.nth","db","_","meeting-id","cljs.core.assoc","re_frame.core.reg_event_fx","p__6727","p__6728","map__6729","cljs.core/--destructure-map","cljs.core.get","vec__6730","block-id","js/fetch","p1__6726#","data","js/console.log","clj-data","cljs.core.js__GT_clj","cljs.core/clj->js","re-frame.core/dispatch","error","js/console.error","p__6738","vec__6739","p__6743","vec__6747","p__6750","vec__6751","turn","re_frame.core.reg_sub","cogito.semantic-map-simple/get-participant-color","participant-name","colors","hash","cljs.core.reduce","cljs.core/+","cljs.core.map","cljs.core/int","or__5002__auto__","cljs.core/mod","cljs.core/count","cogito.semantic-map-simple/simple-map-view","embeddings","re_frame.core.subscribe","selected-turn","cljs.core/deref","iter__5480__auto__","s__6782","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5478__auto__","size__5479__auto__","b__6784","cljs.core/chunk-buffer","i__6783","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__6781","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","cogito.semantic-map-simple/semantic-map-tab","current-meeting","reagent.core.create_class","cljs.core/chunk-first"],"sourcesContent":["(ns cogito.semantic-map-simple\n  (:require [re-frame.core :as rf]\n            [reagent.core :as r]))\n\n;; Events\n(rf/reg-event-db\n ::set-current-meeting\n (fn [db [_ meeting-id]]\n   (assoc db :map/current-meeting meeting-id)))\n\n(rf/reg-event-fx\n ::load-embeddings\n (fn [{:keys [db]} [_ block-id]]\n   (-> (js/fetch (str \"/api/meetings/\" block-id \"/embeddings\")\n                  #js {:credentials \"same-origin\"})\n       (.then #(.json %))\n       (.then (fn [data]\n                (js/console.log \"Raw API response:\" data)\n                (let [clj-data (js->clj data :keywordize-keys true)]\n                  (js/console.log \"Converted data:\" (clj->js clj-data))\n                  (rf/dispatch [::embeddings-loaded clj-data]))))\n       (.catch (fn [error]\n                 (js/console.error \"API error:\" error)\n                 (rf/dispatch [::embeddings-load-failed (str error)]))))\n   {:db (assoc db :map/loading? true)}))\n\n(rf/reg-event-db\n ::embeddings-loaded\n (fn [db [_ data]]\n   (-> db\n       (assoc :map/embeddings (:embeddings data))\n       (assoc :map/stats (:stats data))\n       (assoc :map/loading? false))))\n\n(rf/reg-event-db\n ::embeddings-load-failed\n (fn [db [_ error]]\n   (-> db\n       (assoc :map/error error)\n       (assoc :map/loading? false))))\n\n(rf/reg-event-db\n ::set-selected-turn\n (fn [db [_ turn]]\n   (assoc db :map/selected-turn turn)))\n\n;; Subscriptions\n(rf/reg-sub\n ::current-meeting\n (fn [db _]\n   (:map/current-meeting db)))\n\n(rf/reg-sub\n ::embeddings\n (fn [db _]\n   (:map/embeddings db)))\n\n(rf/reg-sub\n ::loading?\n (fn [db _]\n   (:map/loading? db)))\n\n(rf/reg-sub\n ::error\n (fn [db _]\n   (:map/error db)))\n\n(rf/reg-sub\n ::selected-turn\n (fn [db _]\n   (:map/selected-turn db)))\n\n;; Helper functions\n(defn get-participant-color [participant-name]\n  (let [colors [\"#3B82F6\" \"#10B981\" \"#F59E0B\" \"#EF4444\" \"#8B5CF6\" \"#EC4899\" \"#06B6D4\" \"#84CC16\"]\n        hash (reduce + 0 (map int (or participant-name \"Unknown\")))]\n    (nth colors (mod hash (count colors)))))\n\n;; Components\n(defn simple-map-view []\n  (let [embeddings (rf/subscribe [::embeddings])\n        selected-turn (rf/subscribe [::selected-turn])]\n    [:div {:style {:display \"flex\" :height \"600px\" :background \"#f9fafb\" :border-radius \"8px\"}}\n     \n     ;; Left side - 60%\n     [:div {:style {:width \"60%\" :padding \"16px\"}}\n      [:h3 \"Conversation Map\"]\n      [:p (str \"Showing \" (count @embeddings) \" turns\")]\n      \n      [:svg {:width \"100%\" :height \"400\" :style {:border \"1px solid #ccc\" :background \"white\"}}\n       (for [turn @embeddings]\n         ^{:key (:turn_id turn)}\n         [:circle {:cx (:x turn)\n                  :cy (* (:y turn) 0.8)\n                  :r 5\n                  :fill (get-participant-color (:participant_name turn))\n                  :style {:cursor \"pointer\"}\n                  :on-click #(rf/dispatch [::set-selected-turn turn])}])]]\n     \n     ;; Right side - 40%\n     [:div {:style {:width \"40%\" :padding \"16px\" :border-left \"1px solid #ccc\"}}\n      (if @selected-turn\n        [:div\n         [:h4 \"Turn Details\"]\n         [:p [:strong \"Participant: \"] (:participant_name @selected-turn)]\n         [:p [:strong \"Content: \"] (:content @selected-turn)]]\n        [:p \"Click a dot to see details\"])]]))\n\n(defn semantic-map-tab []\n  (let [current-meeting (rf/subscribe [::current-meeting])\n        embeddings (rf/subscribe [::embeddings])]\n    \n    (r/create-class\n     {:component-did-mount\n      (fn []\n        (when @current-meeting\n          (rf/dispatch [::load-embeddings @current-meeting])))\n      \n      :reagent-render\n      (fn []\n        [:div {:style {:padding \"16px\"}}\n         (if @embeddings\n           [simple-map-view]\n           [:p \"Loading...\"])])})))"]}