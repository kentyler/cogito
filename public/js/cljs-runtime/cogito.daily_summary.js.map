{"version":3,"sources":["cogito/daily_summary.cljs"],"mappings":"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","names":["cogito.daily-summary/format-date","date-str","e11396","js/Date","js/Error","_","cogito.daily-summary/generate-year-options","current-year","start-year","iter__5480__auto__","s__11399","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5478__auto__","size__5479__auto__","cljs.core/count","b__11401","cljs.core/chunk-buffer","i__11400","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__11398","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","year","cljs.core.range","cogito.daily-summary/month-names","cogito.daily-summary/get-month-year-options","today","current-month","s__11408","b__11410","i__11409","iter__11407","i","target-date","month","month-name","cogito.daily-summary/daily-summary-tab","monthly-summaries","re_frame.core.subscribe","monthly-generating?","selected-period","reagent.core.atom","cljs.core/deref","p1__11414#","cljs.core/reset!","s__11416","b__11418","i__11417","iter__11415","option","vec__11425","cljs.core.nth","clojure.string.split","re-frame.core/dispatch","js/parseInt","and__5000__auto__","s__11429","b__11431","i__11430","vec__11436","iter__11428","vec__11455","date","summary-data","cljs.core.sort","e11439","e11459","clean-date","clojure.string/starts-with?","cljs.core.subs","date-obj","summary-text","paragraphs","s__11441","b__11443","i__11442","iter__11440","s__11461","b__11463","i__11462","iter__11460","paragraph","cljs.core.map","clojure.string/trim","cljs.core/empty?","cljs.core/chunk-first"],"sourcesContent":["(ns cogito.daily-summary\n  (:require [reagent.core :as r]\n            [re-frame.core :as rf]\n            [clojure.string :as str]))\n\n(defn format-date [date-str]\n  \"Format date for display\"\n  (if date-str\n    (try\n      (.toLocaleDateString (js/Date. date-str) \"en-US\" \n                          #js {:weekday \"long\" \n                               :year \"numeric\" \n                               :month \"long\" \n                               :day \"numeric\"})\n      (catch js/Error _\n        date-str))\n    \"Unknown Date\"))\n\n(defn generate-year-options []\n  \"Generate year options from 2020 to current + 1\"\n  (let [current-year (.getFullYear (js/Date.))\n        start-year 2020]\n    (for [year (range start-year (inc (inc current-year)))]\n      year)))\n\n(defn month-names []\n  [\"January\" \"February\" \"March\" \"April\" \"May\" \"June\"\n   \"July\" \"August\" \"September\" \"October\" \"November\" \"December\"])\n\n(defn get-month-year-options []\n  \"Generate month/year options for the past 12 months\"\n  (let [today (js/Date.)\n        current-year (.getFullYear today)\n        current-month (.getMonth today)]\n    (for [i (range 12)]\n      (let [target-date (js/Date. current-year (- current-month i) 1)\n            year (.getFullYear target-date)\n            month (.getMonth target-date)\n            month-name (.toLocaleDateString target-date \"en-US\" #js {:month \"long\"})]\n        {:value (str year \"-\" month)\n         :label (str month-name \" \" year)\n         :year year\n         :month month}))))\n\n(defn daily-summary-tab []\n  (let [monthly-summaries (rf/subscribe [:daily-summary/monthly-summaries])\n        monthly-generating? (rf/subscribe [:daily-summary/monthly-summaries-generating?])\n        selected-period (r/atom (str (.getFullYear (js/Date.)) \"-\" (.getMonth (js/Date.))))]\n    (fn []\n      [:div.daily-summary-tab.h-full.flex.flex-col\n       [:div.header.border-b.pb-4.mb-4\n        [:div.flex.justify-between.items-center\n         [:h2.text-xl.font-semibold.text-gray-900 \"Daily Summary\"]\n         [:div.flex.items-center.space-x-4\n          [:select.text-sm.bg-white.border.border-gray-300.rounded.px-3.py-2.focus:outline-none.focus:ring-2.focus:ring-blue-500\n           {:value @selected-period\n            :on-change #(reset! selected-period (-> % .-target .-value))\n            :disabled @monthly-generating?}\n           (for [option (get-month-year-options)]\n             ^{:key (:value option)}\n             [:option {:value (:value option)} (:label option)])]\n          [:button.px-4.py-2.text-sm.bg-blue-500.text-white.rounded.hover:bg-blue-600.disabled:opacity-50\n           {:on-click #(let [[year month] (clojure.string/split @selected-period #\"-\")]\n                        (rf/dispatch [:daily-summary/generate-monthly-summaries \n                                     (js/parseInt year) (js/parseInt month)]))\n            :disabled @monthly-generating?}\n           (if @monthly-generating? \"Generating...\" \"Generate\")]\n          [:p.text-xs.text-blue-500.font-mono \"v2.3.0\"]]]\n        [:p.text-sm.text-gray-600 \"AI summaries for selected month's conversations\"]]\n       \n       [:div.flex-1.overflow-y-auto.p-4\n        (cond\n          @monthly-generating?\n          [:div.flex.justify-center.items-center.py-12\n           [:div.animate-spin.rounded-full.h-8.w-8.border-b-2.border-blue-600.mr-3]\n           [:span.text-gray-600 \"Generating monthly summaries...\"]]\n          \n          (and @monthly-summaries (seq @monthly-summaries))\n          [:div.space-y-6\n           (for [[date summary-data] (sort @monthly-summaries)]\n             ^{:key date}\n             [:div.border.border-gray-200.rounded-lg.p-6.bg-white.shadow-sm\n              [:div.mb-4\n               [:h4.text-xl.font-semibold.text-gray-800\n                (try\n                  (let [clean-date (if (clojure.string/starts-with? (str date) \":\")\n                                    (subs (str date) 1)\n                                    (str date))\n                        date-obj (js/Date. (str clean-date \"T00:00:00.000Z\"))]\n                    (.toLocaleDateString date-obj \"en-US\" \n                                       #js {:weekday \"long\" :month \"long\" :day \"numeric\" :year \"numeric\"}))\n                  (catch js/Error _\n                    (str \"Date: \" date)))]]\n              [:div.text-gray-700.leading-relaxed.space-y-3\n               (let [summary-text (:summary summary-data)\n                     paragraphs (clojure.string/split summary-text #\"\\n\\n\")]\n                 (for [paragraph (map clojure.string/trim paragraphs)]\n                   (when (not (empty? paragraph))\n                     ^{:key paragraph}\n                     [:p paragraph])))]])]\n          \n          :else\n          [:div.text-center.py-12\n           [:p.text-gray-500.mb-4 \"No summaries generated yet\"]\n           [:p.text-sm.text-gray-400 \"Click 'Generate This Month' to create AI summaries of this month's conversations\"]])]])))"]}