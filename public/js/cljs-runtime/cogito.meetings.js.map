{"version":3,"sources":["cogito/meetings.cljs"],"mappings":"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","names":["re_frame.core.reg_event_fx","p__6719","vec__6720","cljs.core.nth","_","block-id","meeting-name","js/confirm","js/fetch","response","p1__6716#","js/alert","cljs.core.get","cljs.core.js__GT_clj","re-frame.core/dispatch","p1__6717#","p1__6737#","data","error","re_frame.core.reg_event_db","p__6742","vec__6744","db","meetings","cljs.core.assoc","p__6768","vec__6769","p__6772","vec__6773","meeting-id","re_frame.core.reg_sub","cogito.meetings/format-date","date-str","e6789","date","js/Date","js/Error","e","cogito.meetings/simple-meeting-item","meeting","or__5002__auto__","and__5000__auto__","cogito.meetings/meetings-list","re_frame.core.subscribe","reagent.core.create_class","cljs.core/deref","cljs.core/seq","iter__5480__auto__","s__6817","cljs.core/LazySeq","temp__5804__auto__","cljs.core/chunked-seq?","c__5478__auto__","size__5479__auto__","cljs.core/count","b__6819","cljs.core/chunk-buffer","i__6818","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__6816","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","cogito.meetings/meeting-detail","p1__6830#","cljs.core.filter","cljs.core._EQ_","cogito.meetings/meetings-page","selected-meeting","cljs.core/chunk-first"],"sourcesContent":["(ns cogito.meetings\n  (:require [re-frame.core :as rf]\n            [reagent.core :as r]))\n\n;; Events\n(rf/reg-event-fx\n ::delete-meeting\n (fn [_ [_ block-id meeting-name]]\n   (when (js/confirm (str \"Are you sure you want to delete the meeting '\" meeting-name \"'? This action cannot be undone.\"))\n     (-> (js/fetch (str \"/api/meetings/\" block-id)\n                   #js {:method \"DELETE\"\n                        :credentials \"same-origin\"})\n         (.then (fn [response]\n                  (if (.-ok response)\n                    (.then (.json response)\n                           #(do\n                              (js/alert (get (js->clj % :keywordize-keys true) :message \"Meeting deleted\"))\n                              (rf/dispatch [::load-meetings])))\n                    (.then (.json response)\n                           #(js/alert (str \"Error: \" (get (js->clj % :keywordize-keys true) :error \"Unknown error\")))))))\n         (.catch #(js/alert \"Network error occurred\"))))\n   {}))\n\n(rf/reg-event-fx\n ::load-meetings\n (fn [_ _]\n   (-> (js/fetch \"/api/meetings\"\n                 #js {:credentials \"same-origin\"})\n       (.then #(.json %))\n       (.then (fn [data]\n                (rf/dispatch [::meetings-loaded (js->clj data :keywordize-keys true)])))\n       (.catch (fn [error]\n                 (rf/dispatch [::meetings-load-failed (str error)]))))\n   {}))\n\n(rf/reg-event-db\n ::meetings-loaded\n (fn [db [_ meetings]]\n   (assoc db :meetings meetings)))\n\n(rf/reg-event-db\n ::meetings-load-failed\n (fn [db [_ error]]\n   (assoc db :meetings-error error)))\n\n(rf/reg-event-db\n ::set-selected-meeting\n (fn [db [_ meeting-id]]\n   (assoc db :selected-meeting meeting-id)))\n\n;; Subscriptions\n(rf/reg-sub\n ::meetings\n (fn [db _]\n   (:meetings db)))\n\n(rf/reg-sub\n ::meetings-error\n (fn [db _]\n   (:meetings-error db)))\n\n(rf/reg-sub\n ::selected-meeting\n (fn [db _]\n   (:selected-meeting db)))\n\n;; Helper functions\n(defn format-date [date-str]\n  (when date-str\n    (try\n      (let [date (js/Date. date-str)]\n        (.toLocaleDateString date \"en-US\" \n                            #js {:year \"numeric\" \n                                 :month \"short\" \n                                 :day \"numeric\"}))\n      (catch js/Error e\n        date-str))))\n\n(defn simple-meeting-item [meeting]\n  [:div {:class \"bg-white rounded-lg shadow-sm border p-4 hover:shadow-md transition-shadow duration-200\"}\n   [:div {:class \"flex justify-between items-center\"}\n    [:div {:class \"flex-1\"}\n     [:h3 {:class \"text-lg font-medium text-gray-900\"}\n      (or (:block_name meeting) \"Unnamed Meeting\")]\n     [:p {:class \"text-sm text-gray-500 mt-1\"}\n      (format-date (:created_at meeting))]\n     [:p {:class \"text-sm text-gray-600 mt-1\"}\n      (str (or (:turn_count meeting) 0) \" turns, \" \n           (or (:participant_count meeting) 0) \" participants\")]]\n    \n    [:div {:class \"flex gap-2\"}\n     [:button {:class \"px-3 py-1 bg-blue-600 text-white text-sm rounded-md hover:bg-blue-700 transition-colors duration-200\"\n               :on-click #(rf/dispatch [::set-selected-meeting (:block_id meeting)])}\n      \"View\"]\n     \n     (when (and (:embedded_count meeting) (> (:embedded_count meeting) 0))\n       [:button {:class \"px-3 py-1 bg-green-600 text-white text-sm rounded-md hover:bg-green-700 transition-colors duration-200\"\n                 :on-click #(do\n                             (rf/dispatch [:cogito.semantic-map-simple/set-current-meeting (:block_id meeting)])\n                             (rf/dispatch [:workbench/set-active-tab :map]))}\n        \"See Map\"])\n     \n     [:button {:class \"px-3 py-1 bg-red-600 text-white text-sm rounded-md hover:bg-red-700 transition-colors duration-200\"\n               :on-click #(rf/dispatch [::delete-meeting (:block_id meeting) (or (:block_name meeting) \"Unnamed Meeting\")])}\n      \"Delete\"]]]])\n\n(defn meetings-list []\n  (let [meetings (rf/subscribe [::meetings])\n        error (rf/subscribe [::meetings-error])]\n    \n    (r/create-class\n     {:component-did-mount\n      (fn []\n        (rf/dispatch [::load-meetings]))\n      \n      :reagent-render\n      (fn []\n        [:div {:class \"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\"}\n         \n         ;; Header\n         [:div {:class \"mb-8\"}\n          [:h1 {:class \"text-3xl font-bold text-gray-900\"} \"Meetings\"]\n          [:p {:class \"text-gray-600 mt-2\"} \n           \"Browse and analyze your conversation data\"]]\n         \n         ;; Error state\n         (when @error\n           [:div {:class \"bg-red-50 border border-red-200 rounded-md p-4 mb-6\"}\n            [:div {:class \"flex\"}\n             [:div {:class \"ml-3\"}\n              [:h3 {:class \"text-sm font-medium text-red-800\"} \"Error loading meetings\"]\n              [:div {:class \"mt-2 text-sm text-red-700\"}\n               [:p (str @error)]]]]])\n         \n         ;; Loading state\n         (when (and (nil? @meetings) (nil? @error))\n           [:div {:class \"flex justify-center items-center py-12\"}\n            [:div {:class \"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"}]])\n         \n         ;; Simple meetings list\n         (when @meetings\n           (if (seq @meetings)\n             [:div {:class \"space-y-4\"}\n              (for [meeting @meetings]\n                ^{:key (:block_id meeting)}\n                [simple-meeting-item meeting])]\n             \n             [:div {:class \"text-center py-12\"}\n              [:div {:class \"text-gray-500\"}\n               [:p {:class \"text-lg\"} \"No meetings found\"]\n               [:p {:class \"text-sm mt-2\"} \"Create a new meeting bot to get started\"]]]))])})))\n\n(defn meeting-detail [meeting-id]\n  (let [meetings (rf/subscribe [::meetings])\n        meeting (when @meetings \n                  (first (filter #(= (:block_id %) meeting-id) @meetings)))]\n    (fn []\n      (if meeting\n        [:div {:class \"bg-white rounded-lg shadow-md p-6\"}\n         [:div {:class \"mb-4\"}\n          [:button {:class \"text-blue-600 hover:text-blue-800 mb-4\"\n                    :on-click #(rf/dispatch [::set-selected-meeting nil])}\n           \"\u2190 Back to list\"]\n          [:h2 {:class \"text-2xl font-bold text-gray-900\"}\n           (:block_name meeting)]\n          [:p {:class \"text-sm text-gray-500 mt-1\"}\n           (format-date (:created_at meeting))]]\n         \n         [:div {:class \"grid grid-cols-2 gap-4 mb-6\"}\n          [:div {:class \"bg-gray-50 p-4 rounded\"}\n           [:p {:class \"text-sm text-gray-600\"} \"Total Turns\"]\n           [:p {:class \"text-2xl font-semibold\"} (:turn_count meeting)]]\n          [:div {:class \"bg-gray-50 p-4 rounded\"}\n           [:p {:class \"text-sm text-gray-600\"} \"Participants\"]\n           [:p {:class \"text-2xl font-semibold\"} (:participant_count meeting)]]\n          [:div {:class \"bg-gray-50 p-4 rounded\"}\n           [:p {:class \"text-sm text-gray-600\"} \"Embeddings\"]\n           [:p {:class \"text-2xl font-semibold\"} (:embedded_count meeting)]]\n          [:div {:class \"bg-gray-50 p-4 rounded\"}\n           [:p {:class \"text-sm text-gray-600\"} \"Status\"]\n           [:p {:class \"text-lg font-semibold\"} (or (:status meeting) \"Unknown\")]]]\n         \n         (when (:meeting_url meeting)\n           [:div {:class \"mb-4\"}\n            [:p {:class \"text-sm text-gray-600\"} \"Meeting URL\"]\n            [:p {:class \"text-sm font-mono bg-gray-100 p-2 rounded\"} (:meeting_url meeting)]])\n         \n         (when (> (:embedded_count meeting) 0)\n           [:button {:class \"mt-4 px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 transition-colors duration-200\"\n                     :on-click #(do\n                                  (rf/dispatch [:cogito.semantic-map-simple/set-current-meeting (:block_id meeting)])\n                                  (rf/dispatch [:workbench/set-active-tab :map]))}\n            \"View Semantic Map\"])]\n        \n        [:div \"Meeting not found\"]))))\n\n(defn meetings-page []\n  (let [selected-meeting (rf/subscribe [::selected-meeting])]\n    (fn []\n      (if @selected-meeting\n        [meeting-detail @selected-meeting]\n        [meetings-list]))))"]}