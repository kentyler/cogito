{"version":3,"sources":["cogito/subs.cljs"],"mappings":"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","names":["re_frame.core.reg_sub","db","p__11782","vec__11783","cljs.core.nth","_","turn-id","cljs.core.get_in","cljs.core.get","today","js/Date","date-str","selected-date","date-key","monthly-summaries"],"sourcesContent":["(ns cogito.subs\n  (:require [re-frame.core :as rf]))\n\n(rf/reg-sub\n :current-prompt\n (fn [db]\n   (:current-prompt db)))\n\n(rf/reg-sub\n :turns\n (fn [db]\n   (:turns db)))\n\n(rf/reg-sub\n :loading?\n (fn [db]\n   (:loading? db)))\n\n(rf/reg-sub\n :authenticated?\n (fn [db]\n   (:authenticated? db)))\n\n(rf/reg-sub\n :user\n (fn [db]\n   (:user db)))\n\n(rf/reg-sub\n :pending-client-selection?\n (fn [db]\n   (:pending-client-selection? db)))\n\n(rf/reg-sub\n :available-clients\n (fn [db]\n   (:available-clients db)))\n\n(rf/reg-sub\n :selecting-client?\n (fn [db]\n   (:selecting-client? db)))\n\n(rf/reg-sub\n :client-selection-error\n (fn [db]\n   (:client-selection-error db)))\n\n(rf/reg-sub\n :logging-out?\n (fn [db]\n   (:logging-out? db)))\n\n(rf/reg-sub\n :current-alternative-index\n (fn [db [_ turn-id]]\n   (get-in db [:alternative-indices turn-id] 0)))\n\n(rf/reg-sub\n :workbench/active-tab\n (fn [db]\n   (get db :workbench/active-tab :conversation)))\n\n;; Bot creation subscriptions\n(rf/reg-sub\n :bot-creation/loading?\n (fn [db]\n   (get db :bot-creation/loading? false)))\n\n(rf/reg-sub\n :bot-creation/message\n (fn [db]\n   (get db :bot-creation/message)))\n\n(rf/reg-sub\n :bot-creation/bots\n (fn [db]\n   (get db :bot-creation/bots [])))\n\n(rf/reg-sub\n :user-email\n (fn [db]\n   (get-in db [:user :email])))\n\n(rf/reg-sub\n :bot-creation/running-bots\n (fn [db]\n   (get db :bot-creation/running-bots [])))\n\n(rf/reg-sub\n :bot-creation/fetching-bots?\n (fn [db]\n   (get db :bot-creation/fetching-bots? false)))\n\n(rf/reg-sub\n :bot-creation/shutting-down\n (fn [db]\n   (get db :bot-creation/shutting-down {})))\n\n;; Active meeting subscriptions\n(rf/reg-sub\n :active-meeting\n (fn [db]\n   (:active-meeting db)))\n\n(rf/reg-sub\n :creating-meeting?\n (fn [db]\n   (:creating-meeting? db)))\n\n(rf/reg-sub\n :meeting-creation-error\n (fn [db]\n   (:meeting-creation-error db)))\n\n;; Stuck meetings subscriptions\n(rf/reg-sub\n :stuck-meetings/meetings\n (fn [db]\n   (get db :stuck-meetings/meetings [])))\n\n(rf/reg-sub\n :stuck-meetings/fetching?\n (fn [db]\n   (get db :stuck-meetings/fetching? false)))\n\n(rf/reg-sub\n :stuck-meetings/completing\n (fn [db]\n   (get db :stuck-meetings/completing {})))\n\n;; Client switching subscriptions\n(rf/reg-sub\n :available-clients\n (fn [db]\n   (get db :available-clients [])))\n\n(rf/reg-sub\n :current-client-id\n (fn [db]\n   (get db :current-client-id)))\n\n(rf/reg-sub\n :switching-client?\n (fn [db]\n   (get db :switching-client? false)))\n\n(rf/reg-sub\n :client-switch-error\n (fn [db]\n   (get db :client-switch-error)))\n\n(rf/reg-sub\n :available-clients-error\n (fn [db]\n   (get db :available-clients-error)))\n\n;; Daily Summary subscriptions\n(rf/reg-sub\n :daily-summary/selected-date\n (fn [db]\n   (get-in db [:daily-summary :selected-date] \n           (let [today (js/Date.)]\n             (.setHours today 0 0 0 0)\n             (.toISOString today)))))\n\n(rf/reg-sub\n :daily-summary/selected-year\n (fn [db]\n   (let [date-str (get-in db [:daily-summary :selected-date] \n                         (let [today (js/Date.)]\n                           (.setHours today 0 0 0 0)\n                           (.toISOString today)))]\n     (.getFullYear (js/Date. date-str)))))\n\n(rf/reg-sub\n :daily-summary/selected-month\n (fn [db]\n   (let [date-str (get-in db [:daily-summary :selected-date] \n                         (let [today (js/Date.)]\n                           (.setHours today 0 0 0 0)\n                           (.toISOString today)))]\n     (.getMonth (js/Date. date-str)))))\n\n(rf/reg-sub\n :daily-summary/data\n (fn [db]\n   (get-in db [:daily-summary :data])))\n\n(rf/reg-sub\n :daily-summary/loading?\n (fn [db]\n   (get-in db [:daily-summary :loading?] false)))\n\n(rf/reg-sub\n :daily-summary/summary\n (fn [db]\n   (get-in db [:daily-summary :summary])))\n\n;; Monthly summaries subscriptions\n(rf/reg-sub\n :daily-summary/monthly-summaries\n (fn [db]\n   (get-in db [:daily-summary :monthly-summaries :data])))\n\n(rf/reg-sub\n :daily-summary/monthly-summaries-generating?\n (fn [db]\n   (get-in db [:daily-summary :monthly-summaries :generating?] false)))\n\n(rf/reg-sub\n :daily-summary/current-day-summary\n (fn [db]\n   (let [selected-date (get-in db [:daily-summary :selected-date]\n                              (let [today (js/Date.)]\n                                (.setHours today 0 0 0 0)\n                                (.toISOString today)))\n         date-key (.substring selected-date 0 10)\n         monthly-summaries (get-in db [:daily-summary :monthly-summaries :data])]\n     (get monthly-summaries date-key))))\n\n;; Monthly Summary subscriptions (yearly summaries)\n(rf/reg-sub\n :monthly-summary/yearly-summaries\n (fn [db]\n   (get-in db [:monthly-summary :yearly-summaries :data])))\n\n(rf/reg-sub\n :monthly-summary/yearly-summaries-generating?\n (fn [db]\n   (get-in db [:monthly-summary :yearly-summaries :generating?] false)))\n\n;; Upload Files subscriptions\n(rf/reg-sub\n :upload-files/files\n (fn [db]\n   (get-in db [:upload-files :files] [])))\n\n(rf/reg-sub\n :upload-files/selected-file\n (fn [db]\n   (get-in db [:upload-files :selected-file])))\n\n(rf/reg-sub\n :upload-files/uploading?\n (fn [db]\n   (get-in db [:upload-files :uploading?] false)))\n\n(rf/reg-sub\n :upload-files/show-text-creator?\n (fn [db]\n   (get-in db [:upload-files :show-text-creator?] false)))\n\n;; Transcripts subscriptions\n(rf/reg-sub\n :transcripts/available-dates\n (fn [db]\n   (get-in db [:transcripts :available-dates] [])))\n\n(rf/reg-sub\n :transcripts/selected-date\n (fn [db]\n   (get-in db [:transcripts :selected-date])))\n\n(rf/reg-sub\n :transcripts/transcript-data\n (fn [db]\n   (get-in db [:transcripts :transcript-data] [])))\n\n(rf/reg-sub\n :transcripts/loading-dates?\n (fn [db]\n   (get-in db [:transcripts :loading-dates?] false)))\n\n(rf/reg-sub\n :transcripts/loading-transcript?\n (fn [db]\n   (get-in db [:transcripts :loading-transcript?] false)))"]}