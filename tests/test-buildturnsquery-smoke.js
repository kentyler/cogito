/**
 * Smoke test for buildTurnsQuery
 * Tests that the function can be called without throwing errors
 * Generated by smoke-test-generator.js
 */

import { buildTurnsQuery } from '../server/summaries/daily-summary/archive/utils.js';
import { DatabaseAgent } from '../database/database-agent.js';
import dotenv from 'dotenv';

// Load environment variables for dev database
dotenv.config();

// Test setup - connects to dev database
let dbAgent = null;

async function setupTest() {
  console.log('üîß Setting up smoke test...');
  
  // Initialize database agent for dev database
  dbAgent = new DatabaseAgent();
  await dbAgent.connect();
  
  console.log('‚úÖ Test setup complete');
}

async function teardownTest() {
  console.log('üßπ Cleaning up test...');
  
  if (dbAgent) {
    await dbAgent.close();
  }
  
  console.log('‚úÖ Test cleanup complete');
}

// Main smoke test function
async function testbuildTurnsQuerySmoke() {
  try {
    await setupTest();
    
    console.log('üß™ Testing buildTurnsQuery can be called without errors...');
    
    // Test 1: Basic function call with minimal valid parameters
    console.log('üìù Test 1: Basic function call');
    
        const result = buildTurnsQuery({ startDate: "2024-01-01", endDate: "2024-01-02", clientId: 1 });
    console.log('üìä Function result:', typeof result);
    
    console.log('‚úÖ Basic function call successful');
    
    
    
    console.log('üéâ All smoke tests passed for buildTurnsQuery');
    
  } catch (error) {
    console.error('‚ùå Smoke test failed:', error);
    throw error;
  } finally {
    await teardownTest();
  }
}

// Export for use in test suites
export { testbuildTurnsQuerySmoke };

// Run the test if this file is executed directly
if (import.meta.url === `file://${process.argv[1]}`) {
  testbuildTurnsQuerySmoke()
    .then(() => {
      console.log('‚úÖ Smoke test passed for buildTurnsQuery');
      process.exit(0);
    })
    .catch(error => {
      console.error('‚ùå Smoke test failed for buildTurnsQuery:', error);
      process.exit(1);
    });
}